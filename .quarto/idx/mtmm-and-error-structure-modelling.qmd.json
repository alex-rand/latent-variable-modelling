{"title":"MTMM and Error Structure Modelling","markdown":{"headingText":"MTMM and Error Structure Modelling","containsRefs":false,"markdown":"\nIn this chapter we'll learn some workflows for situations where we're worried our measured variables are confounded by other unmeasured things besides just the unmeasured 'factors' we're interested in, and how we can address that and reassure ourselves that our inferences about the factor structure are ok. \n\n```{r message = FALSE, results = FALSE, warning = FALSE}\n\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(ggdag)\n\n```\n\nIn the previous example we saw how we can sometimes improve model fit by freeing-up some of the residual covariance terms, rather than doing the typical thing of fixing them at 0. But this feels a bit icky to me -- just pumping out some modification indexes and using that as a basis for opening up some free parameters feels pretty overfitty, because we don't have a strong theory-driven reason for changing the model in that way.\n\nBut there *are* more kosher-feeling theory-driven reasons for freeing up some of the residual covariance parameters. Let's talk about two of them: the first relates to convergent validity, the second relates to discriminant validity.\n\nHere's the first example: imagine I have a theory where there's a thing called 'exceptional leadership', and it is made up of 3 unobservable features, like 'self-confidence', 'oratorical skill', and 'robust compassionateness'. So I make up a survey where I ask 12 questions total, 4 per imagined factor. Then I fit a CFA model and find that it does a great job recreating the empirical variance-covariance matrix. There's lots of great convergent validity between the questions I imagine to define the 3 factors. So I get published! But there's a first problem: what if my within-factor variables are correlated not because they are cleanly confounded by 'self-confidence' (which is what I'm trying to convince you of), but instead because the within-factor survey questions are just worded in a really similar way, IE they are confounded by a latent factor we might call 'wording similarity'? This possibility undermines my case for clean confounding.\n\nNow the second example: imagine I do the same analysis described above, but I find my discriminant validity actually doesn't look so hot, IE there are some high between-factor correlations. It is possible that this is just being caused by some of the variables used in different factors being confounded by their shared **measurement approach,** which creates a backdoor path between the factors.\n\nAs @Brown2006 puts it:\n\n> \"when each construct is assessed by the same measurement approach (e.g., observer rating), it cannot be determined how much of the observed overlap (i.e., factor correlations) is due to method effects as opposed to \"true\" covariance of the traits.\"\n\nSo we have these two risks:\n\n1.  Maybe some of my within-factor variables are confounded by method effects, which creates the *illusion* of convergent validity. If I go to publish my paper and someone raises this concern, then maybe I won't get published! I'll need to find a way to make my model control for possible method-confounding and *still* show good convergent validity.\n2.  Maybe some of my variables of different factors are confounded by method effects, so I don't end up with great discriminant validity. This would be bad, but fitting a model that controls for method effects can maybe make things better.\n\nFear not: there are two ways of adjusting the model to control for measurement confounding, thereby addressing the above risks.\n\n1.  Add method-specific factors to my model (to control for them in the linear model of each variable). @Brown2006 calls this a **Correlated Methods Model**;\n\n2.  Just freely fit the residual covariances between the observed variables that share a method. @Brown2006 calls this a **Correlated Uniqueness Model.** Because remember, 'Uniqueness' is just a fancy term for variable-specific residual variance.\n\nIt's all still just basic linear modelling, and trying to show that the model's results are consistent with the DAG of clean confounding. By adding a method factors or allowing some of the error residuals to be freely fit, I'm controlling for sources of confounding that a reviewer might bring up as a concern, or that might be pulling down my discriminant validity.\n\nHere's how these approaches can improve convergent or divergent validity:\n\n**Convergent validity:** By adding method-factors to the model or freely fitting the residual covariances between the within-factor questions can help me make the case that \"see, even when I allow for correlated errors due to *other* unobserved confounders (like common wording or common methods), the factors still do a good job recreating the empirical covariance structure, IE the loadings still look good, so my argument for *mostly* clean confounding is still reasonable.\" I think this makes sense?\n\n**Divergent validity:** Maybe I can get better discriminant validity, IE reduce the between-factor correlations, by adding those method effects to the linear models, thereby controlling for them. I can do this either by literally adding in some new factors to represent each method, or just by allowing the residual covariances of like-method variables to be freely estimated.\n\n### Simulating Data Based on a DAG {.unnumbered}\n\nNow let's look at an example in detail. This example is taken from @Brown2006, chapter 6.\n\nSome researchers were curious about whether 'happiness' and 'sadness' are totally separate things vs two sides of a single shared spectrum. I guess the implication is that if they are totally separate things then I could be [happy and sad at the same time](https://www.youtube.com/watch?v=U5oIvfraRrU), whereas if they're two sides of a spectrum then I can only ever be one or the other.\n\nThis feels like a good factor analysis question! I can collect a bunch of data that I think map to 'happy' and a bunch of other data that I think map to 'sad', fit a CFA, and see whether the two factors have discriminant validity.\n\nThis is exactly what @Green-et-al-1993 did. They collected a few columns each for 'happy' and 'sad', fit a factor model, and fit a CFA. Each within-factor column had its own measurement approach, but shared a measurement approach with one of the columns of the other factor. So we are at risk of our estimate of between-factor correlations being confounding due to shared measurement approach, which could be hurting my case for discriminant validity!\n\nHere's how we can show this situation in a DAG:\n\n```{r}\n\n# Set DAG coordinates\ndag_coords <- list(\n  x = c(\n    F1 = 1, \n    F2 = 1,\n    H1 = 2,\n    H2 = 2,\n    H3 = 2,\n    S1 = 2,\n    S2 = 2,\n    S3 = 2,\n    M1 = 3,\n    M2 = 3,\n    M3 = 3),\n  y = c(\n    F1 = 2.5,\n    F2 = 1.5,\n    H1 = 2.8,\n    H2 = 2.5,\n    H3 = 2.2,\n    S1 = 1.8,\n    S2 = 1.5,\n    S3 = 1.2,\n    M1 = 2.6,\n    M2 = 2,\n    M3 = 1.4\n  )\n)\n\n# Set DAG relationships and aesthetics\nmeasurement_confounding_dag <- ggdag::dagify(\n  H1 ~ F1,\n  H2 ~ F1,\n  H3 ~ F1,\n  S1 ~ F2,\n  S2 ~ F2,\n  S3 ~ F2,\n  H1 ~ M1,\n  S1 ~ M1,\n  H2 ~ M2,\n  S2 ~ M2,\n  H3 ~ M3,\n  S3 ~ M3,\n  coords = dag_coords\n) %>% \n  \n  tidy_dagitty() %>% \n  \n  mutate(\n    \n    node_colour = case_when(\n      grepl(\"^F|M\", name) ~ \"latent\",\n      grepl(\"^H|S\", name) ~ \"observed\"\n    ),\n    \n    edge_colour = case_when(\n      grepl(\"^M\", name) & grepl(\"1$\", to) ~ \"cornflower blue\",\n      grepl(\"^M\", name) & grepl(\"2$\", to) ~ \"#daed64\",\n      grepl(\"^M\", name) & grepl(\"3$\", to) ~ \"#ed7864\",\n      grepl(\"^F\", name)                   ~ \"black\"\n    )\n  )\n\n# Plot the DAG\nmeasurement_confounding_dag %>%\n  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +\n  geom_dag_point(aes(colour = node_colour)) +\n  scale_colour_manual(values = c(\"dark blue\", \"#edbc64\")) + \n  geom_dag_edges(aes(edge_colour = edge_colour)) +\n  geom_dag_text() +\n  theme_void()\n\n```\n\nSee how the measurment effects M1, M2, and M3 each create a backdoor path between the two factors F1 and F2. So if I want to get better-seeming (and, under the DAG, more accurate) estimate of between-factor correlation, then I need to find a way to close those backdoor paths. The classic way to close these paths would be to condition on the measurement effects by adding them to the linear model, but I can't directly do this because they are unmeasured. But, as discussed above, I can still sort of do it by adding them as factors to my CFA model, or by freely estimating residual correlation between the observed variables that share a measurement approach, which should work if my DAG is mostly accurate.\n\nUnfortunately, the authors of this paper haven't published their data. But we can take this as an opportunity to practice simulating a dataset with relationships implied by a DAG.\n\n```{r}\n\n### Simulate Data from the DAG\n\n# Set seed for replicable results\nset.seed(233)\n\n# Set sample size\nN <- 305\n\n# Create the dataset\ndat_fake <- tibble(\n  \n  # The factors are uncorrelated in reality, but\n  # will be confounded by the measurement effects!\n  F1 = rnorm(N, 0, 1),\n  F2 = rnorm(N, 0, 1),\n  \n  # The measurement effects\n  M1 = rnorm(N, 0, 1),\n  M2 = rnorm(N, 0, 1),\n  M3 = rnorm(N, 0, 1),\n  \n  # The DAG says the measurements are fully determined by the latent factors and measurement effects\n  H1 = .8*F1 + 0.7*M1 + rnorm(N, 0, .3),\n  H2 = .7*F1 + 0.7*M2 + rnorm(N, 0, .3),\n  H3 = .9*F1 + 0.7*M3 + rnorm(N, 0, .3),\n  S1 = .8*F2 + 0.7*M1 + rnorm(N, 0, .3),\n  S2 = .7*F2 + 0.7*M2 + rnorm(N, 0, .3),\n  S3 = .9*F2 + 0.7*M3 + rnorm(N, 0, .3) \n) \n\n```\n\nFun! Now we have our fake data to play with. For starters, since we actually *do* have the values of the latent variables in our dataset, we can demonstrate how directly controlling for the measurement effects in a regression model can close the backdoor path between the factors.\n\n```{r}\n\nlist(\n  lm(H1 ~ S1, dat_fake), \n  lm(H1 ~ S1 + M1, dat_fake)\n) %>% \n  \n  map(broom::tidy) %>% \n  \n  knitr::kable()\n\n```\n\nWhen we just do the simple regression of H1 on S1 we get a big effect with a highly statistically significant p-value, despite the fact that we *know* there's no causal relationship there! But then when we include the confounding measurement effect in the model this effect vanishes in smoke.\n\nThat's all well and good. But in reality we won't have measurements of the latent variables, so we won't be able to directly control for them. Thankfully, we have Factor Analysis. We can control for the measurement effects by estimating the residual correlation between each pair of variables that share a measurement effect. Since, under the DAG, the measurement effects are the only source of correlation between these variables, this should close the backdoor path, IE we should get unbiased estimates of the factor loadings.\n\n....\\@Brown2006 calls this an \"error theory\".....\n\n\n### Correlated Uniqueness Model {.unnumbered}\n\nTo illustrate, we'll fit 2 models: The first is a basic CFA model that just loads each measured variable on its corresponding factor. The second specifies that the residual correlation between the measurement-confounded variables should be freely estimated, IE not fixed at 0.\n\nFirst let's define our utility function like we did in the previous chapter:\n\n```{r}\n### Define a custom function\nfit_measures <- function(fit){\n  \n  summary <- summary(fit, fit.measures = TRUE, standardized = TRUE)\n  \n  res <- list(\n    \n    # Chi-Squared\n    chi_squared = tibble(\n      Test             = \"standard chi-squared\",\n      `DF`             = summary$test$standard$df,\n      `Test Statistic` = round(summary$test$standard$stat, 2),\n      `p-value`        = summary$test$standard$pvalue) %>% \n      \n      mutate(across(everything(), as.character)) %>% \n      \n      pivot_longer(everything()),\n    \n    # RMSEA\n    rmsea = summary$fit %>% \n      \n      as_tibble(rownames = \"stat\") %>% \n      \n      filter(str_detect(stat, \"rmsea\")),\n    \n    # CFI and TLI\n    cfi_tli = summary$fit %>% \n      \n      as_tibble(rownames = \"stat\") %>% \n      \n      filter(str_detect(stat, \"cfi|tli\")) \n    \n  )\n  \n  res\n  \n}\n\n```\n\n```{r}\n\nbasic.definition <- \n  'happy =~ H1 + H2 + H3\n   sad =~ S1 + S2 + S3\n   '\n\ncorrelated_uniqueness.definition <- \n  'happy =~ H1 + H2 + H3\n   sad =~ S1 + S2 + S3\n   \n   H1 ~~ S1\n   H2 ~~ S2\n   H3 ~~ S3\n   '\nbasic.fit <- cfa(\n  data = dat_fake %>% select(matches(\"^(H|S)\")),\n  model = basic.definition\n)\n\ncorrelated_uniqueness.fit <- cfa(\n  data = dat_fake %>% select(matches(\"^(H|S)\")),\n  model = correlated_uniqueness.definition\n)\n\nsummary.basic.fit <- summary(basic.fit, standardized = TRUE)\nsummary.correlated_uniqueness.fit <- summary(correlated_uniqueness.fit, standardized = TRUE)\n\nsummary.basic.fit\nsummary.correlated_uniqueness.fit\n\nfit_measures(basic.fit) %>% \n  \n  knitr::kable(caption = \"Basic Model\")\n\nfit_measures(correlated_uniqueness.fit) %>% \n  \n  knitr::kable(caption = \"Correlated Uniqueness Model\")\n\n\n```\n\nHere we see that under the basic model we have some moderate correlation between the `happy` and `sad` factors, which is a bit of a murky result: it doesn't tell us one way or the other whether happiness and sadness are separate constructs I can feel together or two extremes of the same feeling. But under the correlated uniqueness model this correlation evaporates because we've controlled for the measurement effects, closing the backdoor path between `happy` and `sad`. This model also greatly improves goodness-of-fit, which makes sense because it better reflects the true data-generating process we coded up.\n\nWe also could have controlled for the measurement effects by including measurement factors, IE by adopting a 'Correlated Methods Model'. I tried this but I actually I couldn't get this model to converge, regardless of whether its method factors were correlated or uncorrelated (an 'Uncorrelated Methods Model'. @Brown2006 actually mentions this as a common issue, and favours the Correlated Uniqueness Model for that reason. In his words:\n\n> \"an overriding drawback of the correlated methods model is that it is usually empirically underidentified. Consequently, a correlated methods solution will typically fail to converge. If it does converge, the solution will usually be associated with Heywood cases \\[negative variance estimates\\] and large standard errors\"\n\nNow let's consider the other case in which measurement effects might be hurting us: the case in which *within*-factor measurements are confounded by measurement effects. Here's the DAG:\n\n```{r}\n\ndag_coords <- list(\n  x = c(\n    F1 = 1, \n    F2 = 1,\n    H1 = 2,\n    H2 = 2,\n    H3 = 2,\n    S1 = 2,\n    S2 = 2,\n    S3 = 2,\n    M1 = 3,\n    M2 = 3),\n  y = c(\n    F1 = 2.5,\n    F2 = 1.5,\n    H1 = 2.8,\n    H2 = 2.5,\n    H3 = 2.2,\n    S1 = 1.8,\n    S2 = 1.5,\n    S3 = 1.2,\n    M1 = 2.5,\n    M2 = 1.5\n  )\n)\n\n# Set DAG relationships and aesthetics\nmeasurement_confounding_dag <- ggdag::dagify(\n  H3 ~ F1,\n  S2 ~ F2,\n  H1 ~ M1,\n  H2 ~ M1,\n  H3 ~ M1,\n  S1 ~ M2,\n  S2 ~ M2,\n  S3 ~ M2,\n  coords = dag_coords\n) %>% \n  \n  tidy_dagitty() %>% \n  \n  mutate(\n    \n    node_colour = case_when(\n      grepl(\"^F|M\", name) ~ \"latent\",\n      grepl(\"^H|S\", name) ~ \"observed\"\n    ),\n    \n    edge_colour = case_when(\n      grepl(\"M1\", name)  ~ \"cornflower blue\",\n      grepl(\"M2\", name) ~ \"#ed7864\",\n      grepl(\"^XX\", name) & grepl(\"3$\", to) ~ \"#ed7864\",\n      grepl(\"^F\", name)                   ~ \"black\"\n    )\n  )\n\n# Plot the DAG\nmeasurement_confounding_dag %>%\n  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +\n  geom_dag_point(aes(colour = node_colour)) +\n  scale_colour_manual(values = c(\"dark blue\", \"#edbc64\")) + \n  geom_dag_edges(aes(edge_colour = edge_colour)) +\n  geom_dag_text() +\n  theme_void()\n\n```\n\nThis is the 'true' data-generating process we'll be simulating data from in a moment. Notice that even though the researcher (who can't see this DAG) might think that the unobseved factor causally influences all 3 measured variables, the reality is that each factor only influences one of the measured variables. However, the purported within-factor variables are confounded by measurement method.\n\nLet's simulate the data and analyze:\n\n```{r}\n\n# Set seed for replicable results\nset.seed(233)\n\n# Set sample size\nN <- 30000\n\n# Create the dataset\ndat_fake <- tibble(\n  \n  # Create some uncorrelated factors\n  F1 = rnorm(N, 0, 1),\n  F2 = rnorm(N, 0, 1),\n  \n  # Create some measurement effects\n  M1 = rnorm(N, 0, 1),\n  M2 = rnorm(N, 0, 1),\n  \n  # The DAG says only H3 and S2 are influenced by the factors, but all variables are influenced by a measurement effect.\n  H1 = 0.7*M1 + rnorm(N, 0, .3),\n  H2 = 0.8*M1 + rnorm(N, 0, .3),\n  H3 = 0.9*F1 + 0.8*M1 + rnorm(N, 0, .3),\n  S1 = 0.7*M2 + rnorm(N, 0, .3),\n  S2 = 0.7*F2 + 0.8*M2 + rnorm(N, 0, .3),\n  S3 = 0.7*M2 + rnorm(N, 0, .3) \n) \n\n```\n\nFirst let's fit a basic naive CFA model that does the standard thing of keeping the covariances between variables fixed at 0. Based on the DAG, we should expect this model to return a strong (publishable) but misleading answer -- it will notice the correlation between variables that are considered within-factor under our hypothesis, and say 'wow so correlated, that's consistent with them being *caused* by that factor'. But we know this is wrong: their correlation is simply driven by the shared measurement method:\n\n```{r}\n\nbasic.definition <- \n  'happy =~ H1 + H2 + H3\n   sad =~ S1 + S2 + S3\n   '\n\nbasic.fit <- cfa(\n  data = dat_fake,\n  model = basic.definition\n)\n\nsummary(basic.fit, standardized = TRUE)\n\n```\n\nAnd there you have it -- just as foretold, we have super strong factor loadings for all the variables, even those that are not actually causally influenced by the factor! So it may *look* like I have strong convergent validity, but hopefully if we try to publish this, a reviewer will raise the possibility that these correlations are confounded by measurement effects.\n\nNow I'm going to try closing the backdoor paths between the non-factor-caused variables by allowing the model to learn the covariances, thereby hopefully controlling for unobserved sources of confounding (like the measurement effect). If the loadings stay strong, then my claims to convergent validity are more reasonable.\n\n```{r}\n\ncorrelated_uniqueness.definition <- \n  'happy =~ H1 + H2 + H3\n   sad   =~ S1 + S2 + S3\n   \n   H1 ~~ H2\n   H1 ~~ H3\n   H2 ~~ H3\n   S1 ~~ S2\n   S1 ~~ S3\n   S2 ~~ S3\n   '\n\ncorrelated_uniqueness.fit <- cfa(\n  data = dat_fake,\n  model = correlated_uniqueness.definition\n)\n\nsummary(correlated_uniqueness.fit, standardized = TRUE)\n\n```\n\nUh-oh...the model failed to converge :(. Apparently this is a common thing with CFA models that try to learn the correlation between within-factor variables -- the parameters are non-identified because you're asking the model to learn their correlation simultaneously in two different parameters: the factor loading and the covariance parameter. [This Stack Exchange thread](https://stackoverflow.com/questions/44114501/model-identification-in-lavaan-for-r) explains it nicely."},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"mtmm-and-error-structure-modelling.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","bibliography":["references.bib"],"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"mtmm-and-error-structure-modelling.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{}}}}}