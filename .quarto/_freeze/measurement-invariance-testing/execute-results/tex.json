{
  "hash": "f7b7698efa1adede1ce6e2f92cee891a",
  "result": {
    "markdown": "# MTMM and Error Structure Modelling\n\nIn this chapter we'll work through another example of the Traditional CFA Workflow to get more practice. We'll also introduce the concept of 'Modification Indexes', which researchers often use to improve their model goodness of fit in a way that seems a bit suss to me. Probably a good thing to know about. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(ggdag)\n```\n:::\n\n\n\n## Example 4: School Grades {.unnumbered}\n\nNow let's do [an example taken from the Advanced Statistical Computing people at UCLA](https://stats.oarc.ucla.edu/r/seminars/lgm/). The dataset comes from the High School and Beyond project, which tracks academic performance in the US along with some data about students.\n\nAs usual with CFA, my goal here is to convince somebody that some of my variables are confounded by a shared unmeasured (and unmeasurable) variable, and not by other unmeasured things in different ways from each other. Specifically, I want to convince you that four student grades, namely reading, writing, mathematics and science, are confounded by a shared unmeasurable variable called 'academic performance'. Great.\n\n### Measurement Invariance {.unnumbered}\n\nBut there's a problem: a reviewer might ask if it really makes sense to think of 'academic performance' as being the same thing for boy-labelled and girl-labelled people. So if I want to convince that reviewer of my usual 'simple confounding' DAG structure, then I'll need to answer a few extra questions:\n\n1.  Does the model fit equally well when I fit it on the group-level sub-datasets in isolation?\n2.  Are the data consistent with the idea that the different groups are actually confounded by the same latent thing? People like to test this by making sure the loadings are pretty similar across the models for the different groups. If the loadings are similar then I can can say they are 'invariant'.\n3.  Do the data themselves actually have stable properties across groups? If not, then even if the model fits the data equally well for different groups or at different times, and even if the loadings are pretty similar across groups, then that's actually a bad thing if I want to convince you that the factor is the same thing for different groups! People generally just like to check this by including an intercept term in the linear regression for each variable in the CFA model. If these intercepts are pretty similar across groups or across timepoints then we can say they are 'invariant'.\n\nWhen I'm worrying about these sorts of things, I am worrying about what people like to call **measurement invariance.** As @Brown2006 puts it, the big idea with 'Measurement Invariance' is the worry that:\n\n> \"if either the loading or the intercept \\[of a variable across groups\\] is noninvariant, \\[then the model thinks\\] the observed values of the indicator will differ between groups at a given level of the latent variable.\"\n\nWe definitely don't want a model that thinks that, because it is not consistent with what I'm trying to convince my reviewers of: that the observed variables are merely puppets, confounded by the same unmeasured variable in the same way across all groups or timepoints.\n\n### Multigroup CFA {.unnumbered}\n\nThere are a few classical workflows for dealing with measurement invariance, which \\@Brown2006 details in chapter 7 of his book. But he recommends something called 'Multigroup CFA', so let's go with that. We'll be following the workflow for this type of model as presented in that chapter.\n\n#### 'Configural' Invariance {-}\n\nThe first step is to fit the model separately for the two groups in isolation and see whether they both have OK goodness of fit. So let's split the data into two subsets based on the group we're interested in, and then define the **lavaan** models with the usual syntax, but specifying that want the linear model of each variable to also have an intercept, as explained above:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Load the data\ndat <- read_csv('data/ucla/hsbdemo.csv')\n\n### Load the data again but in split format, for what is to come.\ndat_split <- list(\n  boys  = dat %>% filter(female == \"female\"),\n  girls = dat %>% filter(female == \"male\")\n)\n\n### Define the basic CFA model\nonefac <- 'f1  =~ read + write + math + science'\n\n### Fit the model separately for each group\nonefac_models <- list(\n  onefac_boys  = cfa(onefac, data = dat_split$boys, meanstructure = TRUE),\n  onefac_girls = cfa(onefac, data = dat_split$girls, meanstructure = TRUE) \n)\n\n### Gaze at the parameter estimates\nonefac_models %>% map(summary, standardized = TRUE, fit.measures = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$onefac_boys\nlavaan 0.6.16 ended normally after 46 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        12\n\n  Number of observations                           109\n\nModel Test User Model:\n                                                      \n  Test statistic                                 1.903\n  Degrees of freedom                                 2\n  P-value (Chi-square)                           0.386\n\nModel Test Baseline Model:\n\n  Test statistic                               230.890\n  Degrees of freedom                                 6\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    1.000\n  Tucker-Lewis Index (TLI)                       1.001\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -1463.504\n  Loglikelihood unrestricted model (H1)      -1462.553\n                                                      \n  Akaike (AIC)                                2951.009\n  Bayesian (BIC)                              2983.305\n  Sample-size adjusted Bayesian (SABIC)       2945.387\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.000\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.187\n  P-value H_0: RMSEA <= 0.050                    0.479\n  P-value H_0: RMSEA >= 0.080                    0.400\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.013\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               8.006    0.800\n    write             0.801    0.091    8.769    0.000    6.414    0.792\n    math              0.985    0.102    9.621    0.000    7.889    0.866\n    science           0.863    0.102    8.453    0.000    6.912    0.768\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             51.734    0.959   53.949    0.000   51.734    5.167\n   .write            54.991    0.775   70.911    0.000   54.991    6.792\n   .math             52.394    0.872   60.052    0.000   52.394    5.752\n   .science          50.697    0.862   58.830    0.000   50.697    5.635\n    f1                0.000                               0.000    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             36.133    6.426    5.623    0.000   36.133    0.360\n   .write            24.410    4.271    5.716    0.000   24.410    0.372\n   .math             20.736    4.693    4.419    0.000   20.736    0.250\n   .science          33.165    5.555    5.971    0.000   33.165    0.410\n    f1               64.099   13.331    4.808    0.000    1.000    1.000\n\n\n$onefac_girls\nlavaan 0.6.16 ended normally after 44 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        12\n\n  Number of observations                            91\n\nModel Test User Model:\n                                                      \n  Test statistic                                 0.719\n  Degrees of freedom                                 2\n  P-value (Chi-square)                           0.698\n\nModel Test Baseline Model:\n\n  Test statistic                               176.055\n  Degrees of freedom                                 6\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    1.000\n  Tucker-Lewis Index (TLI)                       1.023\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -1275.517\n  Loglikelihood unrestricted model (H1)      -1275.157\n                                                      \n  Akaike (AIC)                                2575.033\n  Bayesian (BIC)                              2605.164\n  Sample-size adjusted Bayesian (SABIC)       2567.288\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.000\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.153\n  P-value H_0: RMSEA <= 0.050                    0.750\n  P-value H_0: RMSEA >= 0.080                    0.186\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.009\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               8.531    0.816\n    write             0.954    0.119    7.983    0.000    8.137    0.794\n    math              0.863    0.113    7.663    0.000    7.361    0.766\n    science           0.999    0.124    8.031    0.000    8.521    0.798\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             52.824    1.095   48.227    0.000   52.824    5.056\n   .write            50.121    1.074   46.653    0.000   50.121    4.891\n   .math             52.945    1.008   52.548    0.000   52.945    5.508\n   .science          53.231    1.119   47.577    0.000   53.231    4.987\n    f1                0.000                               0.000    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             36.404    7.769    4.686    0.000   36.404    0.333\n   .write            38.825    7.775    4.993    0.000   38.825    0.370\n   .math             38.197    7.210    5.298    0.000   38.197    0.413\n   .science          41.300    8.365    4.937    0.000   41.300    0.363\n    f1               72.774   16.251    4.478    0.000    1.000    1.000\n```\n:::\n:::\n\n\n\nThe first thing I notice is that the models don't fit great. Indeed, these are the first significant chi-squared test p-values I've ever seen in all of these examples, indicating that the results are consistent with there being lots of residual variance the model hasn't accounted for. But the UCLA people don't comment on this, so I guess neither will I.\n\nNext I notice that the factor loadings and residual variances look pretty good and consistent across the groups. This is suggestive of what people unfortunately like to call **Configural Invariance**, which just means the same model fits to the groups pretty much the same in isolation. As @Brown puts it:\n\n> \"equal form \\[aka 'configural invariance' is when\\] the number of factors and pattern of indicator--factor loadings are identical across groups)\"\n\nThe main exception to this I notice in the above model is that there's a bunch more residual variance in 'math' for boys than for girls. So maybe that's something to look out for.\n\nThe next thing to do is fit the exact same model as above, but in a slightly fancier syntax. Specifically, we're gonna fit it with a single command so that it can serve as the best-fitting big daddy model when we start constraining parameters to be equal across groups and doing the nested likelihood ratio test stuff we'll be doing later. I think this is literally the exact same thing as the previous model but it serves that LRT-daddy role by giving us a single chi-squared goodness-of-fit statistic for the whole dataset, rather than one for each group in isolation. Honestly I'm not sure why both @Brown and UCLA have us fit the previous model at all.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfigural.fit <- cfa(onefac, data = dat, group = \"female\", meanstructure = TRUE)\n```\n:::\n\n\n\nNotice how we just did the exact same thing as before, but we used the full dataset instead of the split sub-datasets, and we used `cfa()` function's `group` parameter to tell the model we're interested in group stuff. I'm not actually gonna print the outputs for this model because the loadings and residual variances are the exact same for the previous model, and the single chi-squared statistic is simply the sum of the chi-squared statistics from the previous model.\n\n#### 'Metric' / 'Weak' Invariance\n\nNext we're gonna want to see if goodness-of-fit isn't significantly reduced when we constrain the loading for each variable to be equal in both models. The idea is that if the loadings are pretty much equal then that's consistent with the variables all being confounded *to the same degree* by the same unmeasured thing for both boys and girls. The conventional terrible name for this is 'Metric' invariance or 'Weak' invariance, but @Brown just calls it 'equal loadings', which seems fine to me.\n\nWe can fit this model in \\*\\*lavaan\\* using the `cfa()` function's `group.equal` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal.loadings.fit <- cfa(onefac, data = dat, group = \"female\", \n  group.equal = c(\"loadings\"), meanstructure = TRUE) \n\nsummary(equal.loadings.fit, standardized = TRUE, fit.measures = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.16 ended normally after 74 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        24\n  Number of equality constraints                     3\n\n  Number of observations per group:                   \n    female                                         109\n    male                                            91\n\nModel Test User Model:\n                                                      \n  Test statistic                                 6.801\n  Degrees of freedom                                 7\n  P-value (Chi-square)                           0.450\n  Test statistic for each group:\n    female                                       3.692\n    male                                         3.109\n\nModel Test Baseline Model:\n\n  Test statistic                               406.945\n  Degrees of freedom                                12\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    1.000\n  Tucker-Lewis Index (TLI)                       1.001\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -2741.111\n  Loglikelihood unrestricted model (H1)      -2737.710\n                                                      \n  Akaike (AIC)                                5524.221\n  Bayesian (BIC)                              5593.486\n  Sample-size adjusted Bayesian (SABIC)       5526.956\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.000\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.121\n  P-value H_0: RMSEA <= 0.050                    0.612\n  P-value H_0: RMSEA >= 0.080                    0.212\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.044\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\n\nGroup 1 [female]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               7.844    0.790\n    write   (.p2.)    0.866    0.074   11.744    0.000    6.789    0.816\n    math    (.p3.)    0.939    0.077   12.214    0.000    7.365    0.836\n    science (.p4.)    0.928    0.080   11.590    0.000    7.277    0.790\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             51.734    0.951   54.410    0.000   51.734    5.212\n   .write            54.991    0.797   69.011    0.000   54.991    6.610\n   .math             52.394    0.843   62.128    0.000   52.394    5.951\n   .science          50.697    0.882   57.472    0.000   50.697    5.505\n    f1                0.000                               0.000    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             37.013    6.379    5.802    0.000   37.013    0.376\n   .write            23.119    4.238    5.455    0.000   23.119    0.334\n   .math             23.282    4.536    5.133    0.000   23.282    0.300\n   .science          31.858    5.499    5.794    0.000   31.858    0.376\n    f1               61.530   11.526    5.338    0.000    1.000    1.000\n\n\nGroup 2 [male]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               8.664    0.822\n    write   (.p2.)    0.866    0.074   11.744    0.000    7.498    0.760\n    math    (.p3.)    0.939    0.077   12.214    0.000    8.134    0.803\n    science (.p4.)    0.928    0.080   11.590    0.000    8.037    0.775\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             52.824    1.105   47.796    0.000   52.824    5.010\n   .write            50.121    1.034   48.484    0.000   50.121    5.082\n   .math             52.945    1.062   49.862    0.000   52.945    5.227\n   .science          53.231    1.088   48.942    0.000   53.231    5.130\n    f1                0.000                               0.000    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             36.095    7.641    4.724    0.000   36.095    0.325\n   .write            41.025    7.538    5.442    0.000   41.025    0.422\n   .math             36.439    7.293    4.996    0.000   36.439    0.355\n   .science          43.048    8.114    5.305    0.000   43.048    0.400\n    f1               75.057   14.697    5.107    0.000    1.000    1.000\n```\n:::\n:::\n\n\n\nNotice how in this output the unstandardized loadings are the same in each group, except for the loading for the first variable, which we sacrificed to define the scale of the factor like we usually do. But notice how the standardized loadings are still different.\n\nThe loadings and residual variances still look pretty good in this model, but let's do the likelihood ratio test to see if people will believe me when I tell them I have solid 'metric' invariance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(configural.fit, equal.loadings.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nChi-Squared Difference Test\n\n                   Df    AIC    BIC Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)\nconfigural.fit      4 5526.0 5605.2 2.622                                      \nequal.loadings.fit  7 5524.2 5593.5 6.801      4.179 0.06269       3     0.2428\n```\n:::\n:::\n\n\n\nThat p-value isn't significant, so we're off to the races. So far so good.\n\n#### 'Scalar' / 'Strong' Invariance\n\nMoving on now to test whether the goodness of fit is still ok when we constrain the variable-level *means* to be equal:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal.intercepts.fit <- cfa(onefac, data = dat, group = \"female\", \n                            group.equal = c(\"loadings\",\"intercepts\"), meanstructure = TRUE)\n\nsummary(equal.intercepts.fit, standardized = TRUE, fit.measures = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.16 ended normally after 108 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        25\n  Number of equality constraints                     7\n\n  Number of observations per group:                   \n    female                                         109\n    male                                            91\n\nModel Test User Model:\n                                                      \n  Test statistic                                47.779\n  Degrees of freedom                                10\n  P-value (Chi-square)                           0.000\n  Test statistic for each group:\n    female                                      14.313\n    male                                        33.466\n\nModel Test Baseline Model:\n\n  Test statistic                               406.945\n  Degrees of freedom                                12\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.904\n  Tucker-Lewis Index (TLI)                       0.885\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -2761.600\n  Loglikelihood unrestricted model (H1)      -2737.710\n                                                      \n  Akaike (AIC)                                5559.200\n  Bayesian (BIC)                              5618.569\n  Sample-size adjusted Bayesian (SABIC)       5561.543\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.194\n  90 Percent confidence interval - lower         0.141\n  90 Percent confidence interval - upper         0.251\n  P-value H_0: RMSEA <= 0.050                    0.000\n  P-value H_0: RMSEA >= 0.080                    1.000\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.089\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\n\nGroup 1 [female]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               7.961    0.797\n    write   (.p2.)    0.828    0.076   10.884    0.000    6.592    0.788\n    math    (.p3.)    0.940    0.077   12.151    0.000    7.479    0.846\n    science (.p4.)    0.915    0.081   11.318    0.000    7.288    0.784\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read    (.10.)   52.164    0.898   58.065    0.000   52.164    5.224\n   .write   (.11.)   53.633    0.766   70.021    0.000   53.633    6.412\n   .math    (.12.)   52.534    0.818   64.187    0.000   52.534    5.941\n   .science (.13.)   51.595    0.839   61.520    0.000   51.595    5.552\n    f1                0.000                               0.000    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             36.315    6.399    5.675    0.000   36.315    0.364\n   .write            26.507    4.602    5.759    0.000   26.507    0.379\n   .math             22.251    4.545    4.896    0.000   22.251    0.285\n   .science          33.247    5.715    5.818    0.000   33.247    0.385\n    f1               63.376   11.894    5.328    0.000    1.000    1.000\n\n\nGroup 2 [male]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n  f1 =~                                                                 \n    read              1.000                               8.640    0.822\n    write   (.p2.)    0.828    0.076   10.884    0.000    7.155    0.681\n    math    (.p3.)    0.940    0.077   12.151    0.000    8.117    0.804\n    science (.p4.)    0.915    0.081   11.318    0.000    7.910    0.758\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read    (.10.)   52.164    0.898   58.065    0.000   52.164    4.964\n   .write   (.11.)   53.633    0.766   70.021    0.000   53.633    5.103\n   .math    (.12.)   52.534    0.818   64.187    0.000   52.534    5.206\n   .science (.13.)   51.595    0.839   61.520    0.000   51.595    4.945\n    f1                0.152    1.272    0.119    0.905    0.018    0.018\n\nVariances:\n                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n   .read             35.798    7.935    4.512    0.000   35.798    0.324\n   .write            59.273   10.111    5.862    0.000   59.273    0.537\n   .math             35.924    7.495    4.793    0.000   35.924    0.353\n   .science          46.310    8.702    5.322    0.000   46.310    0.425\n    f1               74.649   14.704    5.077    0.000    1.000    1.000\n```\n:::\n:::\n\n\n\nYup, as expected, each variable mean is constrained to be the same across groups. And how about that likelihood ratio test?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(configural.fit, equal.loadings.fit, equal.intercepts.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nChi-Squared Difference Test\n\n                     Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff\nconfigural.fit        4 5526.0 5605.2  2.622                           \nequal.loadings.fit    7 5524.2 5593.5  6.801      4.179 0.06269       3\nequal.intercepts.fit 10 5559.2 5618.6 47.779     40.978 0.35580       3\n                     Pr(>Chisq)    \nconfigural.fit                     \nequal.loadings.fit       0.2428    \nequal.intercepts.fit  6.609e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\nOh no! The p-value is highly significant, so nobody will believe me if I tell them I have 'strong' invariance. In other words, my data are consistent with the possibility that even though the variables all load on the factor to the same extent across groups, they still have different values at the same level of each variable. Going back to our primordial DAG of simple confounding, I think this is just another way of saying that the data are consistent with there being secret confounders influencing the variables in one group but not the other. So nobody is gonna believe my DAG.\n\nThis opens the door to what @Brown calls 'Partial Invariance'. He encourages us to look at modification indexes like we saw in Example 2 above, and see if freeing up a couple of the fixed parameters would improve goodness of fit. He says this is a fine thing to do, while exposing us to the ever-present risk of noise-mining. As he puts it:\n\n> \"\\[Once you've freed a parameter from needing to be equal across groups and the LRT no longer returns a significant p-value\\], the invariance evaluation may proceed \\[in accordance with the usual workflow\\]. The researcher will freely estimate the \\[now free parameter\\] in both groups in subsequent \\[steps of the usual analysis\\]. Indeed, Byrne et al. (1989) note that such analyses may proceed as long as there exists at least one noninvariant parameter other than the marker indicator\".\n\nPersonally yeah this seems like noise-mining, but let's give it a try just for fun.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodindices(equal.intercepts.fit, sort = TRUE) %>% \n  \n  # Arrange them in order of modification index\n  arrange(desc(mi)) %>% \n  \n  select(lhs, op, rhs, mi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs op     rhs    mi\n1   read ~~    math 3.396\n2   read ~~    math 2.805\n3   read ~~ science 1.670\n4   read ~~ science 0.741\n5   read ~~   write 0.585\n6  write ~~    math 0.497\n7  write ~~ science 0.375\n8  write ~~ science 0.240\n9   read ~~   write 0.210\n10  math ~~ science 0.154\n11 write ~~    math 0.085\n12    f1 =~    read 0.024\n13    f1 =~    read 0.024\n14  math ~~ science 0.007\n```\n:::\n:::\n\n\n\nHmm, looks like our old friend `modindices()` doesn't return estimates for parameters constrained to be equal across groups. But it is showing some interesting stuff. Like maybe instead of freeing up a group-constrained parameter, I could just free up that reading \\<--> math residual correlation. It feels like a real education researcher could whip up a path diagram that makes this seem justified, and I just tested it and it makes it so that the measurement invariance actually works for the intercepts, even when they are still constrained across groups! So maybe I would just proceed that way.\n\nBut just for posterity, here's how you can look at the modification indexes for the group-constrained parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlavTestScore(equal.intercepts.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$test\n\ntotal score test:\n\n   test     X2 df p.value\n1 score 40.018  7       0\n\n$uni\n\nunivariate score tests:\n\n    lhs op   rhs     X2 df p.value\n1  .p2. == .p16.  0.766  1   0.381\n2  .p3. == .p17.  2.674  1   0.102\n3  .p4. == .p18.  1.308  1   0.253\n4 .p10. == .p24.  1.722  1   0.189\n5 .p11. == .p25. 33.415  1   0.000\n6 .p12. == .p26.  0.407  1   0.524\n7 .p13. == .p27.  9.051  1   0.003\n```\n:::\n:::\n\n\n\nAnnoyingly, it doesn't tell you the variable names. So you'll need to check and see what they are called in the model output. Also I think these aren't technically 'modification indexes' per se, but they are analogous.\n\nLooks like that .p11 == .p25 constraint is a juicy one to free up -- this corresponds to the reading variable. To free it up I'll need to refit the model with more explicit syntax. Specifically, I'll need to use the `group.partial()` argument to override the fixedness introduced in the `group.equal()` argument:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Partial invariance model\npartial.invariance.fit <- cfa(\n  onefac, \n  dat, \n  group = \"female\", \n  group.equal = c(\"loadings\", \"intercepts\"), \n  group.partial=c(\"read~1\"), # This frees up the desired intercepts\n  meanstructure = TRUE)\n```\n:::\n\n\n\nNow we can re-run the likelihood ratio test and see if we're good to proceed to testing for invariance of the residual variance terms:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(configural.fit, equal.loadings.fit, partial.invariance.fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nChi-Squared Difference Test\n\n                       Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff\nconfigural.fit          4 5526.0 5605.2  2.622                           \nequal.loadings.fit      7 5524.2 5593.5  6.801      4.179 0.06269       3\npartial.invariance.fit  9 5559.3 5622.0 45.885     39.084 0.43060       2\n                       Pr(>Chisq)    \nconfigural.fit                       \nequal.loadings.fit         0.2428    \npartial.invariance.fit  3.259e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\nGah, allowing the intercept to be freely estimated has improved the p-value, but it still looks like the data are consistent with the idea that the observed variables have different values across groups for the same value of the latent variable. Darn! We could keep going, IE checking the modification indexes and freeing up parameters until we pass the likelihood ratio test, but that doesn't feel so good to me. These data just aren't consistent with the theory offered by the primordial DAG of simple confounding. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}