---
title: "CFA"
format:
  html:
    theme: default
---

```{r message = FALSE, results = FALSE, warning = FALSE}

library(tidyverse)
library(lavaan)
library(ggdag)

```

## The Whole Game {-}

I think it is safe to say that The Whole Game of Confirmatory Factor Analysis (CFA) is that I'm trying to convince my colleagues that my observed variables are confounded by some unmeasured variables. Usually I'm trying to show that the variables are confounded in a very particular way, where a few small groups of variables are confounded only by one unmeasured variable per group.

So here's the architypal DAG of a CFA, where the Xs are observed variables, and F1 is an unmeasured variable I am imagining to exist. 

```{r}

# Set DAG coordinates
dag_coords <- list(
  x = c(
    F1 = 1, 
    X1 = 2,
    X2 = 2,
    X3 = 2
  ),
  y = c(
    F1 = 1.5,
    X1 = 1.8,
    X2 = 1.5,
    X3 = 1.2
  )
)

# Set DAG relationships and aesthetics
measurement_confounding_dag <- ggdag::dagify(
  X1 ~ F1,
  X2 ~ F1,
  X3 ~ F1,
  coords = dag_coords
) %>% 
  
  tidy_dagitty() %>% 
  
  mutate(
    ` ` = case_when(
      grepl("^F", name) ~ "latent",
      grepl("^X", name) ~ "observed"
    ))

# Plot the DAG
measurement_confounding_dag %>%
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_point(aes(colour = ` `)) +
  scale_colour_manual(values = c("dark blue", "#edbc64")) + 
  geom_dag_edges() +
  geom_dag_text() +
  theme(legend.title = element_blank()) +
  theme_void()


```

The Whole Game of CFA is to convince your reader that the patterns of variance and covariance in your data are consistent with the above DAG (or some other version of it). 

The classic way of testing whether your data are consistent with a DAG is to condition on some of the variables, perhaps by including it as a predictor in a linear regression model, and see whether the patterns of correlation change in the ways the DAG expects based on the rules of d-separation. For the above DAG, this would mean controlling for F1 and seeing whether the correlations between X1, X2, and X3 decrease as a result.

But in CFA we always assume the confounder is unmeasured, so we can't directly control for it. Instead, we can only try to argue for our DAG in a more hand-wavy sort of way: we expect confounded variables to be correlated with each other, and uncounfounded variables to _not_ be correlated with each other. This is why we focus on the empirical correlation matrix as the basis for our model: if a few of my variables are very correlated with each other then that is *consistent* with them being confounded by the same unobserved variable. But it is not proof! You can never prove a DAG, after all.

So interpreting a CFA model is all about checking to see whether the correlations between the variables are consistent with what we would expect to see under the DAG where each group of variables is confounded by a single unmeasured variable.

Let's look at some examples of how people have liked to make the case for their missing-confounder DAG.

## Example 1: Toxic Striving Energy {-}

The first example we'll look at is from @Finch2015, chapter 3. The practice dataset is introduced on page 10. It is from a study about human motivation. The dataset is a weird questionnaire called the 'Achievement Goal Scale' (AGS), which asks people 12 questions about how much toxic striving energy they have. The dataset provided seems to have lots of mysterious columns in it, but we're probably good to just keep the columns with responses to the AGS questionnaire:

```{r message=FALSE, warning=FALSE}

### Load the data
dat_raw <- foreign::read.spss('data/finch-and-french/edps744.sav') 
  
### Clean the data
dat_ags <- dat_raw %>% 

  # Convert to a data frame for ease of use
  as.data.frame() %>% 
  
  # Keep only columns that start with the prefix 'ags' followed by a question number
  select(matches("ags\\d")) 

```

### Data Exploration {-}

We don't want to do too much exploration before fitting our factor models, because the whole game of CFA is to commit to our hypotheses before checking what the data looks like, so we don't mislead ourselves with [forking paths](http://www.stat.columbia.edu/~gelman/research/unpublished/p_hacking.pdf). But just for fun, we can explore the distributions of the answers to each of the 12 questions:

```{r warning = FALSE, message = FALSE}

dat_ags %>% 

  # Pivot to prepare the data for visualization
  pivot_longer(
    cols      = everything(),
    names_to  = "question",
    values_to = "response",
    names_transform = list(question = fct_inorder)  
  ) %>% 

  # Plot
  ggplot() +
  geom_histogram(aes(x = response)) + 
  theme_bw() + 
  facet_wrap(~question)

```

Seems like some questions have different means and variances from each other. For example, the answers to `ags11` and `ags12` are relatively flat, while the answers to `ags4` and `ags5` are more bunched up around the highest values. The responses clearly skew towards higher values in aggregate.

We can also do some healthy exploration of missingness in the dataset. For starters: what proportion of values are missing in each row?

```{r}

dat_ags %>% 
  
  # Calculate the proportion of missing values 
  summarise_all(~ sum(is.na(.)) / (sum(is.na(.) + sum(!is.na(.))))) %>% 
  
  # Rounding to make the results more presentable
  mutate(across(everything(), round, 6)) %>% 
  
  # Create the table
  knitr::kable(title = "Proportion of Missing Responses in Each Column") 

```

That's very little missingness. Probably no need to do multiple imputation here.

The authors also do a preliminary test of whether the responses are normally distributed, since this is one of the fundamental assumptions of maximum likelihood estimation. Kristoffer Magnusson has created [a cool interactive teaching tool that nicely illustrates this point](https://rpsychologist.com/likelihood/). It is worth remembering that we *do not* make this type of assumption for linear regression in general -- only for maximum likelihood estimates. All we need assume for linear regression is that the *residuals* are normally distributed, as opposed to the data themselves. This common misunderstanding can lead researchers to commit what Richard McElreath has called ['histomancy'](https://stats.stackexchange.com/questions/515444/histomancy-what-does-mcelreath-propose-we-do-instead).

To evaluate the assumption of normalness underlying maximum likelihood estimation, the authors do what seems to be a multivariate version of a classic 'normal probability plot'. These are explained nicely in [this stack exchange thread.](https://stats.stackexchange.com/questions/218638/understanding-normal-probability-plots) They also produce some of the classic tests of skew and kurtosis, which I don't want to get into here. [This youtuber](https://www.youtube.com/watch?v=TM033GCU-SY&t=26s) has nice introductory videos about these topics.

```{r}

# Run the Mardia tests for normalness
mardia.object <- psych::mardia(dat_ags)

# Plot the multivariate version of the normal probability plot
plot(mardia.object)

# Present the outputs we're interested in
tibble(
  "Skew" = mardia.object$skew,
  "Skew p-value" = mardia.object$p.skew,
  "Kurtosis" = mardia.object$kurtosis,
  "Kurtosis p-value" = mardia.object$p.kurt
) %>% 
  
  knitr::kable()
  

```

The plotted points don't seem to fit the straight line super well, which suggests that the normalness assumption may not hold here. Also, the hypothesis tests for skew and kurtosis return some mighty low p-values, suggesting that we've got lots of each of them. So maybe maximum likelihood estimation isn't such a good idea here?

The authors proceed with it anyway for pedogogical reasons, because they want to illustrate how the maximum likelihood estimates differ from estimates arrived at using other methods.

> "In actual practice, given the lack of multivariate normality that seems apparent in the previous results, we would likely not use ML and instead rely on the alternative estimation approach."

### Model Fitting {-}

The researchers who collected the data do what good factor analysts do: they look to the literature to set up some clear and specific candidate hypotheses, and see the degree to which this new data is compatible with each of them.

One of the candidate hypotheses is that a person's toxic striving energy ('achievement goal orientedness'?) is secretly driven by four platonic unobservable things, namely:

1.  Mastery Approach 'MAP' (eg. *"I want to learn as much as possible")*;

2.  Mastery Avoidant 'MAV' (eg. *"I want to avoid learning less than I possibly could"*);

3.  Performance Approach 'PAP' (eg. *"I want to do well compared to other students");*

4.  Performance Avoidant 'PAV' (eg. *"It is important for me to avoid doing poorly compared to other students"*)

We'll call the above hypothesis **H1.** But there's another hypothesis that says actually the 'Mastery' variables are just one monolithic thing, so really there are only 3 factors, namely 'Mastery', 'PAP', and 'PAV'. We'll call this one **H2.** These will be the two candidate hypotheses we're gonna test via factor analysis.

The way **lavaan** works is that you need to separately define the model syntax as a string, and then feed that string to one of the model-fitting functions like `cfa()` . Then we can call the `summary()` function to get a big table of outputs.

```{r message=FALSE, warning=FALSE}

# Define the relationships from my hypothesis
h1.definition <- 
'map=~ags1+ags5+ags7
mav=~ags2+ags6+ags12
pap=~ags3+ags9+ags11
pav=~ags4+ags8+ags10'

# Fit the model
h1.fit <- cfa(
  data  = dat_ags,
  model = h1.definition
)

# Look at the results
h1.summary <- summary(h1.fit, fit.measures = TRUE, standardized = TRUE)

h1.summary

semPlot::semPaths(h1.fit)

```

That's a lot of outputs. Let's break down the output into smaller bite-sized chunks.

### Goodness of Fit Statistics {-}

#### Chi-Squared Statistic {-}

The first thing to look at is the chi-squared statistic from the 'User Model', IE the model I, the user, have just fit. I like to think of this as a measure of how different the model's reconstructed correlation matrix looks compared to the actual empirical correlation matrix of the data. So we use this statistic to test the null hypothesis "there is no significant difference between model's reconstructed correlation matrix and the empirical one". So, confusingly, we're actually hoping to *accept* the null hypothesis here. This model returns a value of 328.312 with a vanishingly small p-value, so we reject the null hypothesis, which is bad: it suggests our model isn't doing a good job replicating the empirical correlation matrix.

Here's a quote from @gorsuch1983 that explains this stuff from the slightly different angle:

> "The test of significance \[for a CFA model fit by maximum likelihood\] gives a chi-square statistic with the null hypothesis being that all the population covariance has been extracted by the hypothesized number of factors. If the chi-square is significant at the designated probability level, then the residual matrix still has significant covariance in it."

So this chi-squared statistic provides a first look at goodness-of-fit, but @Finch2015 say it is actually not very trustworthy in practice because the null hypothesis is sort of crazy: we want a more permissive test than just whether the model is *perfectly* recreating the empirical correlation matrix.

> "this statistic is not particularly useful in practice because it tests the null hypothesis that \[the model-reconstructed correlation matrix is equal to the empirical correlation matrix\], which is very restrictive. The test will almost certainly be rejected when the sample size is sufficiently large... In addition, the chi-square test relies on the assumption of multivariate normality of the indicators, which may not be tenable in many situations."

So we're gonna wanna look at statistics other than just chi-squared for goodness-of-fit, but it seems like a fine place to start. Let's look at the chi-squared statistic of our model:

```{r}

### Create a nice summary table
tibble(
  Test             = "standard chi-squared",
  `DF`             = h1.summary$test$standard$df,
  `Test Statistic` = round(h1.summary$test$standard$stat, 2),
  `p-value`        = h1.summary$test$standard$pvalue
) %>% 
  
  mutate(across(everything(), as.character)) %>% 
  
  pivot_longer(everything()) %>% 
  
  knitr::kable()

```

It takes lots of skill and experience to have a sense of whether a test statistic is big or small given the degrees of freedom at play, but we can see from the p-value that we reject the null hypothesis in a big way. This is bad -- it suggests that, given our assumptions, there's a big difference between our model and the data.

#### Root Mean Squared Error Approximation (RMSEA) {-}

Another one people like to go with is the Root Mean Squared Error Approximation (RMSEA). This statistic takes some math and background to understand, which I'm not going to go over here. I found [this document](http://www.statpower.net/Content/312/Handout/Measures%20of%20Fit%20in%20Structural%20Equation%20Modeling.pdf) to be the clearest (but also pretty mathy) explanation.

Essentially, RMSEA is a weighted sum of the discrepancies between the model's reconstructed correlation matrix and the empirical correlation matrix. But it also does a nice thing where it discounts model complexity and sample size to help us not overfit. Here's the definition:

$\text{RMSEA} = \sqrt{\dfrac{χ^2 - \text{df}}{\text{df}(n-1)}}$

See how it takes the chi-squared statistic and divides it by degrees of freedom (as a proxy for model complexity) and sample size? This makes for a more conservative measure of goodness-of-fit. Apparently the square-root is used *"to return the index to the same metric as the original standardized parameters"*. I don't really understand that part... is it because a Chi-squared random variable is the squared version of a normal standard variable?

As with the raw chi-squared statistic, we want RMSEA to be small because it is intended as a measure of the distance between the empirical correlation matrix and the model-estimated correlation matrix. According to @Finch2015, people like to say:

-   RMSEA \<= 0.05 is a 'good fit';

-   0.05 \< RMSEA \<= 0.08 is an 'ok fit'

-   RMSEA > .08 is a 'bad fit'.

Let's check the RMSEA of our model:

```{r}

# make a nice summary table
h1.summary$fit %>% 
  
  as_tibble(rownames = "stat") %>% 
  
  filter(str_detect(stat, "rmsea")) %>% 
  
  knitr::kable()

```

Yikes -- looks like our whole RMSEA, as well as its confidence interval, are above the 'bad fit' conventional threshold of .08. This corroborates what we saw with the chi-squared statistic above.

#### Comparative Fit Index (CFI) and Tucker-Lewis Index (TLI) {-}

CFI seems to be the most trusted and widely-used tool for assessing goodness of fit in a CFA. Basically the idea is that we ask: "how much does the chi-squared statistic of my model differ from the chi-squared statistic of the worst model I can think of?", where the conventional "worst model I can think of" is the model where I assume all of my observed variables are totally uncorrelated. This sort of has the opposite flavour of the deviance statistic I'm already familiar with, which compares the current model with "the best model I can think of."

$\text{CFI} = 1 - \dfrac{\text{max}(χ^2_T - \text{df}_T, 0)}{\text{max}(χ^2_0 - \text{df}_0, 0)}$

Actually, the numerator and denominator are both equal to the 'non-centrality parameter' of their respective candidate distributions. I'm not gonna get into this, but this is an idea that also shows up in power analysis as a way of comparing the null and candidate hypotheses.

We want to end up with a CFI as close to 1 as possible, because that suggests a big difference between my model and the worst possible model. So people say we can sort of think of this as analogous to $R^2$ from linear regression. People seem to have adopted 0.95 as am arbitrary cutoff for 'good fit' for the CFI.

If you want to learn more about the CFI, I found [this article](https://scholarworks.umass.edu/cgi/viewcontent.cgi?article=1561&context=pare) a well-written resource.

Tucker-Lewis Index seems to be pretty similar to CFI, and we interpret it in the same way. Let's look at both of them:

```{r}

# Make a nice summary table
h1.summary$fit %>% 
  
  as_tibble(rownames = "stat") %>% 
  
  filter(str_detect(stat, "cfi|tli")) %>% 
  
  knitr::kable()

```

Looks like the CFI and TLI look ok, but don't meet the conventional .95 cutoff. So they are in line with the chi-squared and RMSEA in suggesting that our goodness-of-fit isn't so good.

### Convergent Validty {-}

Like I said before: when I'm doing factor analysis, my goal is to convince my research peers that my observed variables are confounded by an unobserved variable, and that therefore they provide a way of 'measuring' that unobserved variable. This seems like an ontologically dubious framing, and it also seems impossible to prove. But people who do research have settled on a few ways of trying to make this case.

One such way is to take all of the measured variables I'm imagining to be caused by the same unmeasured factor and show that they are indeed correlated with each other, because this is what we would expect under the simple DAG where they are all confounded by the same latent variable. When this happens, I can say that my factor has **Convergent Validity.** In the words of @gorsuch1983:

> *"Convergent validity occurs when several variables deemed to measure the same construct correlate with each other."*

Or, as @Kline2011 puts it:

> *"Variables presumed to measure the same construct show convergent validity if their intercorrelations are appreciable in magnitude."*

It seems like to make the jump from 'these measured variables are correlated' to 'these measured variables are *caused* by a single shared latent factor' I would need to be also making the further assumption that there aren't *other* unmeasured confounders muddying up the observed covariances. It's DAGs all the way down...

Based on the textbooks I'm working from, here are a few questions I can answer if I want to make the case for Convergent Validity:

1.  Are the factor loadings statistically significant?
2.  Are the standardized factor loadings pretty big (IE pretty close to 1)?
3.  Are the standardized within-factor loadings pretty similar to each other?
4.  Do the measurements seem to have good 'reliability' as measured by something like Chronbach's Alpha, Average Variance Extracted, or Composite Reliability?
5.  Are all of the residual variances less than .50, IE is the model explaining at least half the variance of each model?

First we can look at the factor loadings. These are essentially just the regression coefficients of each factor on each of the outcome variables for which it was allowed to be a covariate. So we want them to be big and significant.

```{r}

### Make a nice summary table of the factor loadings
h1.summary$pe %>% 
  
  as_tibble() %>% 
  
  # Keep only the rows with info on factor loadings
  slice(1:12) %>% 
  
  # Clean up the important values, then combine them into a single column
  mutate(
    std.all = round(std.all, 2),
    std.all = paste0(std.all, ", pvalue = ", pvalue, ")")
  ) %>% 
  
  # reformat the table
  select(lhs, rhs, std.all) %>% 
  
  pivot_wider(
    names_from = "lhs", 
    values_from = "std.all",
    values_fill = "0"
  ) %>% 
  
  column_to_rownames("rhs") %>% 
  
  knitr::kable(caption = "Standardized factor loadings and p-values")
```

Firstly, notice that all of the non-fixed loadings are highly statistically significant, with all p-values smaller than .01. This is good! Super statistically-significant loadings are a necessary sign that our measured variables are actually good proxies for the imaginary 'latent' factor we're purporting to use them to measure.

Next, @Kline2011 says that we can start assessing convergent validity by just looking at the standardized loadings can in isolation. In his words on page 344:

> *"\[with reference to a CFA model he has fit\]: A few other standardized coefficients are rather low, such as .433 for the self-talk indicator of constructive thinking, so evidence for convergent validity is mixed."*

To my eye it looks like some of the standardized loadings on the 'mav' factor are pretty low. Also, it seems like only 'pap' has really consistent loadings across all of its measured variables: the other three factors all have a bunch of variance between their loadings. So this all seems like a bit of a red flag.

Next we can look at measures of **reliability,** which neither @gorsuch1983 nor @Finch2015 mention. This is a concept based on the assumption from classical test theory that every datapoint is the sum of a 'true' score and 'noise', where the 'true' score is the value of the latent variable. This is an ontologically dubious framing, but I guess a useful or at least traditional one. Anyway, people like to do things in hopes of estimating the proportion of the variance explained by the 'true' score as opposed to noise, and when they do these things they say they are estimating 'reliability'. Ok.

The all-time classic 'reliability' measure is called **Cronbach's Alpha.** Cronbach didn't actually invent it, so hello [Stigler's Law](https://en.wikipedia.org/wiki/Stigler%27s_law_of_eponymy). Here's what it looks like:

$\alpha = (\dfrac{k}{1-k}) (1 - \dfrac{\sum\sigma_y^2}{\sigma_T^2})$

The term on the right is doing most of the work: its denominator is the variance of the column that contains the rowwise sums of my dataset. Its numerator is the sum of the variances of each column. So we're asking: 'is the variance of the *sums* larger than the variance of the individual columns?' This will be true if the columns are generally pretty correlated, because the sums will *stack up* the raw values, instead of them cancelling each other out. So really we're just asking: are the columns generally pretty correlated?'. If my columns are pretty correlated and I make the standard assumption that *no other latent factors are influencing my observed values* (an insane assumption), then I can feel comfortable saying that Cronbach's Alpha is useful for figuring out whether my measurements are all loading on the same 'latent' variable. Since the observed values are gonna be consistent with each other if this is true, people like to say that Cronbach's Alpha gives a picture of **'Internal Consistency Reliability'.**

As with everything related to convergent validity, this is just another way of asking how correlated my measured variables are.

Let's calculate Cronbach's Alpha for each of the subscales I've used to define my supposed factors:

```{r}

### Split the dataset into the subscales assumed by my factor model
subscales <- list(
  map = dat_ags %>% select(ags1, ags5, ags7),
  mav = dat_ags %>% select(ags2, ags6, ags12),
  pap = dat_ags %>% select(ags3, ags9, ags11),
  pav = dat_ags %>% select(ags4, ags8, ags10)
)

### Calculate Chronbach's Alpha for each subscale, then analyze.
alphas <- subscales %>% 
  
  map(psych::alpha) %>% 
  
  map(summary) %>% 
  
  knitr::kable() 
```

According to @Kline2011, these all look like good results, so they help me feel good about claiming convergent validity:

> "Generally, coefficients around .90 are considered "excellent," values around .80 as "very good," and values about .70 as "adequate.""

Cronbach's Alpha has some drawbacks as a measure of 'reliability', so @Kline2011 says to also calculate the **Average Variance Extracted (AVE)**, which is simply the average of the within-factor squared factor loadings. This is based on the idea that a squared factor loading is the variance explained of the variable by that factor. The convention is that if the AVE \> 0.5, then you can feel good about claiming convergent validity. I guess this makes sense -- seems like a pretty simple and ad-hoc way of asking whether your loadings are generally on the same page. But obviously if I have lots of observed variables defining the factor then I'm at risk of having a bunch of high loadings and a bunch of low loadings, resulting in a misleadingly moderate average? To me it seems like we might as well just look at the raw loadings themselves -- no need to look at an average here.

But just for fun, let's calculate the AVE. Rather than doing it manually, we can use a ready-made function from the **semTools** package

```{r}

semTools::AVE(h1.fit) %>% 
  
  knitr::kable()

```

Based on the rule-of-thumb that we want the AVE to be at least .50, it seems like the 'mav' factor is having some trouble. It also had the lowest Cronbach Alpha. So maybe the observed variables I'm using to measure it aren't actually doing a great job? This hurts convergent validity for that factor.

Lastly, we can also try to measure this unicorn of 'reliability' by just directly asking "what proportion of the total variance is explained by the factor model?". People like to do this by summing all the factor loadings, squaring that sum, and dividing it by itself plus the sum of the residual variances of the variables (IE dividing it by the total empirical variance of the variable). They call this one the **Composite Reliability (CR).**

```{r}

semTools::compRelSEM(h1.fit) %>% 
  
  knitr::kable()

```

Apparently the rule of thumb for this one is the same as for Cronbach's Alpha. So we can feel good about all of them except for 'mav', which has taken a beating via these 3 checks.

@Kline2011, on page 307, gives yet another way of assessing convergent validity: he fits a CFA, then asks whether "the majority" of the variances of the observed variables have been explained, IE whether the standardized residual variances are \<50. I guess the idea is that the amount of variance explained for a variable by a factor depends on how correlated In his words:

> "\[in reference to one of his models:\] \[the\] model fails to explain the majority (> .50) of variance for a total of four out of eight indicators, which indicates poor convergent validity."

Let's have a look at the residual variances. These are just the proportion of the empirical variance of each measured variable that is left unexplained by the linear models that make up the factor analysis.

```{r}

h1.summary$pe %>% 
  
  as.data.frame() %>% 
  
  filter(grepl("ags\\d", lhs)) %>% 
  
  mutate(factor = case_when(
    lhs %in% c("ags1", "ags5", "ags7") ~ "map",
    lhs %in% c("ags2", "ags6", "ags12") ~ "mav",
    lhs %in% c("ags3", "ags9", "ags11") ~ "pap",
    lhs %in% c("ags4", "ags8", "ags10") ~ "pav",
  )) %>% 
  
  select(factor, "var" = lhs, std.all) %>% 
  
  knitr::kable()

```

Looks like the model has mostly done a good job for the 'Performance' factors, with all variables having at least \~60% of their variance explained. But the 'Mastery' factors are worse, especially 'mav', with two of its three variables having only \~40% of their variances explained. This is yet more evidence that the 'mav' factor isn't doing so great a job.

\~\~Lastly, Gorsuch suggests another way of testing for convergent validity:

> *factor loadings of several variables hypothesized to relate to the construct can also be tested for significance. They could be specified as equal for the one model and the chi-square for that model subtracted from another hypothesized factor structure where they are allowed to vary. If the two differ significantly from each other, then one or more of the variables is more related to the construct than one or more of the other variables."*

Let's try this out: we'll fit another model that assumes all of the within-factor loadings are equal, and see if that results in a statistically significant reduction in goodness-of-fit. If it does, then we lose some evidence of convergent validity.\~\~

### Discriminant Validity {-}

Next let's look at the estimated correlations between the factors. If my hypothesis H1 is true then we should expect all of the factors to be pretty uncorrelated from each other, but if H2 is true then we should expect MAP and MAV to be super correlated with each other, because H2 thinks there's no such thing as MAP and MAV -- there's just one big 'Mastery' factor:

```{r}

### Make a nicer version of the correlation matrix of the factors
  
h1.summary$pe %>% 
  
  as_tibble() %>% 
 
  # Keep only the rows with info on factor loadings
  slice(25:34) %>% 
 
  select(lhs, rhs, std.lv) %>% 
  
  mutate(
    std.lv = round(std.lv, 2),
    across(everything(), as.character)
  ) %>% 
  
  pivot_wider(
    names_from = "lhs", 
    values_from = "std.lv",
    values_fill = " " 
  ) %>% 
  
  column_to_rownames("rhs") %>% 
  
  knitr::kable(caption = "Correlation matrix of the factors")

```

Interesting -- the 'Mastery' factors and the 'Performance' factors each seem to be very correlated with each other, while being nice and uncorrelated with the two factors that make up the other. This suggests that we have bad **discriminant validity** between the imagined two types of 'Mastery' and two types of 'Performance' -- the model can't really tell them apart as separate things. This makes it harder for me to argue that they *are* in fact separate things. But then again, maybe my hypothesis is that the within-skill factors *should* be highly correlated. Anyhow, the fact that the 'Mastery' and 'Performance' factors are all pretty uncorrelated with each other is a good thing for both hypotheses.

@Brown2006 gives some nice advice about how to assess discriminant validty, and how to deal with it if you have it:

> "In applied research, a factor correlation that exceeds .80 or .85 is often used as the criterion to define poor discriminant validity. When two factors are highly overlapping, a common research strategy is to respecify the model by collapsing the dimensions into a single factor and determine whether this modification results in a significant degradation in model fit. If the respecified model provides an acceptable fit to the data, it is usually favored because of its superior parsimony."
>
> @gorsuch1983 suggests doing something similar:

> *"\[fit the model\] with the qualification that the correlations between one or more of the constructs being tested for discriminant validity is one. The difference between chi-squares from \[this model vs the model where the correlations are allowed to freely vary\] tests whether the constructs have a correlation significantly less than 1.0. If the correlation between the factors for the two constructs is not significantly different from 1.0, the difference chi-square will be insignificant. This means the null hypothesis of no discriminatory validity would be accepted. If the difference chi-square is significant, then the null hypothesis is rejected and the model that assumes discriminatory validity by allowing the correlation to be less than one is the more appropriate one."*

This has the flavour of a likelihood-ratio test. Let's do it. First we need to fit the model where the correlation between the Mastery factors and the correlation between the 'Performance' factors are both constrained to be 1:

```{r warning = FALSE, message = FALSE}

# Define the relationships from my hypothesis
h1_orthogonal.definition <- 
'map=~ags1+ags5+ags7
mav=~ags2+ags6+ags12
pap=~ags3+ags9+ags11
pav=~ags4+ags8+ags10

map ~~ 1*mav
pap ~~ 1*pav
'

# Fit the model
h1_orthogonal.fit <- cfa(
  data  = dat_ags,
  model = h1_orthogonal.definition
)

# Compare the goodness-of-fit statistics for the two models
anova(h1.fit, h1_orthogonal.fit) %>% 
  
  knitr::kable()



```

Looks like the reduction in chi-squared goodness-of-fit is statistically significant when we force the within-skill factors to be perfectly correlated. So, according to the @gorsuch1983 quote above, we can reject the null hypothesis that the within-skill factors are perfectly correlated. This gives a justification for continuing to distinguish between them as separate factors, and helps me make a believable claim that my posited factors are in fact different things.

Actually, I think another way we could have done this would be to just fit the model where we just define one big factor for 'Mastery' and one big factor for 'Performance'. I tried this and it returned even worse fit, which means the extra parameters (the correlation parameters) are significantly improving fit in the pure h1 model.

### Conclusion {-}

All-in-all it seems like neither of these hypotheses do a great job. Sure, the 'Performance' factors have good convergent validity, and we see good discriminant validity between the 'Performance' and 'Mastery' factors, but the 'Mastery' factors don't have great convergent validity and fitting a single monolithic 'Mastery' factor doesn't improve things.

I can make a better model by dropping the measured 'Mastery' variables that aren't having lots of their variance explained by the 'Mastery' factors, but this is contrary to the spirit of CFA. If I want to test a different hypothesis then I should collect a different sample.

For a nice template of a more formal presentation of the results of a CFA, see @Brown2006 chapter 4 appendix 3.

## Example 2: Biodiversity {-}

Here's [a fun example from the Wetland and Aquatic Research Center of the U.S. Geological Survey](https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/atoms/files/SEM_09_2-Ex1_CFA_exercise.pdf): given counts of different types of animals, can we fit a convincing CFA model for 'diversity'? In other words: is the correlation structure of all my counts of various types of animals consistent with the possibility that those counts are confounded by a single unobserved thing called 'diversity'?

```{r message=FALSE, warning=FALSE}

dat_raw <- read.csv('data/grace/SEM_09_2-Ex1_CFA_exercise_data.csv')

dat_clean <- dat_raw %>%  
  
  janitor::clean_names()

```

### Data Exploration {-}

Just for fun let's see if the relative proportions of the different animals varies between countries:

```{r message=FALSE, warning=FALSE}

### Proportions
dat_clean %>% 
  
  pivot_longer(
    cols      = !matches("^c"),
    names_to  = "animal",
    values_to = "count"
  ) %>% 
  
  group_by(country) %>% 
  mutate(
    total = sum(count), 
    prop  = round(count / total, 2)
  ) %>% 
  ungroup() %>% 

  ggplot() + 
  geom_bar(aes(x = animal, y = prop), stat = "identity") + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  facet_wrap(~country)

```

The proportions are pretty stable. Finland seems like the weirdest one, and it isn't even that weird.

### Model Fitting {-}

The hypothesis we want to test here is simply that all of these counts are confounded by a single unmeasured 'biodiversity' variable. This is straightforward to fit:

```{r}

h1.definition <- 
'diversity =~ mammals + birds + amphibians + reptiles + beetles + butterflies'

h1.fit <- cfa(
  data  = dat_clean %>% select(-country) %>% scale(),
  model = h1.definition
)

h1.summary <- summary(h1.fit)

h1.summary

```

Let's have a look at the same 4 goodness-of-fit measures we used in the previous example. We can bring them all together with a nice utility function:

```{r}

### Define a custom function
fit_measures <- function(fit){
  
  summary <- summary(fit, fit.measures = TRUE, standardized = TRUE)
  
  res <- list(
    
    # Chi-Squared
    chi_squared = tibble(
      Test             = "standard chi-squared",
      `DF`             = summary$test$standard$df,
      `Test Statistic` = round(summary$test$standard$stat, 2),
      `p-value`        = summary$test$standard$pvalue) %>% 
      
      mutate(across(everything(), as.character)) %>% 
      
      pivot_longer(everything()),
    
    # RMSEA
    rmsea = summary$fit %>% 
      
      as_tibble(rownames = "stat") %>% 
      
      filter(str_detect(stat, "rmsea")),
    
    # CFI and TLI
    cfi_tli = summary$fit %>% 
      
      as_tibble(rownames = "stat") %>% 
      
      filter(str_detect(stat, "cfi|tli")) 
    
  )
  
  res
  
}

### Call the function, then send its outputs to clean tables
fit_measures(h1.fit) %>% 
  
  map(knitr::kable)
  

```

The model isn't fitting very well -- Chi-Squared is highly statistically significant (we fail to reject the null hypothesis that there is residual variance left to explain), RMSEA is well above its conventional threshold, and CFI and TLI are both well below their conventional thresholds.

Here @Grace introduces a new method for tweaking our CFA model to improve goodness of fit. The idea is that we can use fancy math to ask "if I took a certain fixed parameter from my model definition and allowed it to be freely estimated, how much would my model's chi-squared goodness of fit change?" People like to take this estimated change in goodness-of-fit and call it a **modification index.** As @Brown2006 puts it:

> "The modification index reflects an approximation of how much the overall model $χ^2$ would decrease if the fixed or constrained parameter was freely estimated."

Apparently conventional cutoff for a 'good' modification index is 3.84. So to get some ideas on how we might improve our goodness-of-fit, let's print out the modification indexes for each of the fixed parameters in the model and see which of them pass that threshold:

```{r}

# Get the estimated change in chi-squared for each fixed parameter
modindices(h1.fit) %>% 
  
  # Arrange them in order of modification index
  arrange(desc(mi)) %>% 
  
  select(lhs, op, rhs, mi) %>% 
  
  knitr::kable(digits = 2)

```

Based on the operation symbol "\~\~", it seems like all of the modification indexes correspond to residual correlations between observed variables. This teaches me something about CFA models! I guess in the typical CFA model we fix the residual correlations to 0? This helps me understand why the [Bayesian CFA model as implemented in **brms**](https://discourse.mc-stan.org/t/confirmatory-factor-analysis-using-brms/23139) specifies `rescor = FALSE` . I was confused about this!

Actually, I just realized @gorsuch1983 already explained this to me! Think back to where he showed us the definition of the 'Common Factor Model':

$R_{vv} = PR_{ff}P' + U_{vv}$

And remember how Gorsuch specified that $U_{vv}$ is assumed to be a diagonal matrix, IE the residual correlations is assumed to be uncorrelated for each variable. This is the whole thing about the 'unique factors', IE the error terms, of the linear models of each measured variable are gonna be uncorrelated. [This recorded seminar and notes from UCLA](https://stats.oarc.ucla.edu/r/seminars/rcfa/) give a nice clear walkthrough of the notation in a slightly different form from @gorsuch1983.

From the DAGs perspective of CFA, assuming uncorrelated residuals sort of makes sense to me: if I want to convince you that my measured variables are all confounded by the same single unmeasured variable, then I think fixing the residual errors at 0 is a way of committing my model to the idea that there aren't *other* unmeasured variables confounding certain of my measured guys. It is a strong assumption that, if it holds up, provides better evidence that my variables really truly are just confounded by a single unmeasured thing.

So I guess I could write out this standard CFA model in a more McElreath fashion like so:

\$\$ \begin{align*}
\begin{bmatrix} \text{mammals}_i \\ \text{birds}_i \\ \text{amphibians}_i \\ \text{reptiles}_i \\ \text{beetles}_i \\ \end{bmatrix} & \sim
\operatorname{MVNormal} \begin{pmatrix} \begin{bmatrix} \mu_{mammals} \\ \mu_{birds} \\ \mu_{amphibians} \\ \mu_{reptiles} \\ \mu_{beetles} \end{bmatrix}, \mathbf \Sigma\end{pmatrix}\\

\mu_{mammals} = \lambda_{mammals} F_i \\
\mu_{birds} = \lambda_{birds} F_i \\
\mu_{amphibians} = \lambda_{amphibians} F_i \\
\mu_{reptiles} = \lambda_{reptiles} F_i \\
\mu_{beetles} = \lambda_{beetles} F_i \\

\Sigma \begin{pmatrix} 
\sigma_{mammals}&0 &0 &0 &0 \\ 
0 & \sigma_{birds} &0 &0 &0 \\ 
0 & 0 & \sigma_{amphibians} &0 &0 \\ 
0 & 0 & 0 & \sigma_{reptiles} &0 \\ 
0 & 0 & 0 & 0 & \sigma_{beetles} 
\end{pmatrix} \\
\end{align*} \$\$

In human words: the observed counts of each of the 5 animal types are imagined to be drawn from a shared multivariate normal distribution. The mean of each dimension of that distribution is a linear function of a single shared factor, which we're calling 'biodiversity'. The variance of each dimension of that distribution is unique, and there is no covariance between the dimensions.

But now think back to our modification indexes: a few of them are saying that if we allow the residual covariances to be freely estimated rather than fixed at 0, then we can improve model fit by a whole lot. Specifically, if we allow the residual covariance between birds and beetles and/or between birds and amphibians to be freely estimated, then model fit as measured by the chi-squared statistic might be significantly improved. Here's what the model is gonna look like now:

\$\$ \begin{align*}
\begin{bmatrix} \text{mammals}_i \\ \text{birds}_i \\ \text{amphibians}_i \\ \text{reptiles}_i \\ \text{beetles}_i \\ \end{bmatrix} & \sim
\operatorname{MVNormal} \begin{pmatrix} \begin{bmatrix} \mu_{mammals} \\ \mu_{birds} \\ \mu_{amphibians} \\ \mu_{reptiles} \\ \mu_{beetles} \end{bmatrix}, \mathbf \Sigma\end{pmatrix}\\

\mu_{mammals} = \lambda_{mammals} F_i \\
\mu_{birds} = \lambda_{birds} F_i \\
\mu_{amphibians} = \lambda_{amphibians} F_i \\
\mu_{reptiles} = \lambda_{reptiles} F_i \\
\mu_{beetles} = \lambda_{beetles} F_i \\

\Sigma \begin{pmatrix} 
\sigma_{mammals}&0 &0 &0 &0 \\ 
0 & \sigma_{birds} &\theta_\text{b&a} &0 &\theta_\text{b&b} \\ 
0 &\theta_\text{b&a} & \sigma_{amphibians} &0 &0 \\ 
0 & 0 & 0 & \sigma_{reptiles} &0 \\ 
0 &\theta_\text{b&b} & 0 & 0 & \sigma_{beetles} 
\end{pmatrix} \\
\end{align*} \$\$

See how I've filled in the variance-covariance matrix of the likelihood to include a few more free parameters?

Actually, Grace proceeds by fitting two more models, one with each of these two candidate covariance parameters as freely fitting. Then he uses `anova()` to do a likelihood-ratio test for them. We can't test all 3 models at once because models 2 and 3 aren't nested with each other.

```{r}

### Letting the covariance between birds and beetles be freely estimated
h2.definition <- 
'diversity =~ mammals + birds + amphibians + 
              reptiles + beetles + butterflies
 
 birds ~~ beetles'


h2.fit <- cfa(
  data  = dat_clean %>% select(-country) %>% scale(),
  model = h2.definition
)

### Letting the covariance between birds and amphibians be freely estimated
h3.definition <- 
  'diversity =~ mammals + birds + amphibians + 
              reptiles + beetles + butterflies
 
 birds ~~ amphibians'


h3.fit <- cfa(
 data  = dat_clean %>% select(-country) %>% scale(),
  model = h3.definition
)

anova(h1.fit, h2.fit)
anova(h1.fit, h3.fit)
```

Looks like model H3 has the lowest AIC and the more significant improvement in chi-squared fit. So let's continue working with that one in the following sections.

### Validity {-}

We can do the same 5 checks of validity we used in the previous 'Mastery and Performance' example. Let's start with the big summary printout:

```{r}
summary.h3 <- summary(h3.fit, fit.measures = TRUE, standardized = TRUE)

summary.h3

```

The factor loadings are all highly statistically significant, which is the first thing to check to make sure nothing is going horribly wrong.

The standardized loadings are pretty big as well, but not super great for 'reptiles'. Also there's a lot of variance in the loadings, which is evidence that my simple DAG of confounding may not be perfect -- there are other unmeasured variables influencing some of my animal counts to different degrees. I mean of course there are, but the degree to which this is apparent based on the factor loadings undermines my claims to convergent validity.

Next we can look at the standardized residual variances. Some of them look great, and all but 'reptiles' pass the threshold of 0.5.

I could look at the 'reliability' statistics too, but can't be bothered right now. Onwards to another example!

## Example 3: Happy and Sad {-}

### MTMM and 'Error Theory' {-}

"multitrait–multimethod"

In the previous example we saw how we can sometimes improve model fit by freeing-up some of the residual covariance terms, rather than doing the typical thing of fixing them at 0. But this feels a bit icky to me -- just pumping out some modification indexes and using that as a basis for opening up some free parameters feels pretty overfitty, because we don't have a strong theory-driven reason for changing the model in that way.

But there *are* more kosher-feeling theory-driven reasons for freeing up some of the residual covariance parameters. Let's talk about two of them: the first relates to convergent validity, the second relates to discriminant validity.

Here's the first example: imagine I have a theory where there's a thing called 'exceptional leadership', and it is made up of 3 unobservable features, like 'self-confidence', 'oratorical skill', and 'robust compassionateness'. So I make up a survey where I ask 12 questions total, 4 per imagined factor. Then I fit a CFA model and find that it does a great job recreating the empirical variance-covariance matrix. There's lots of great convergent validity between the questions I imagine to define the 3 factors. So I get published! But there's a first problem: what if my within-factor variables are correlated not because they are cleanly confounded by 'self-confidence' (which is what I'm trying to convince you of), but instead because the within-factor survey questions are just worded in a really similar way, IE they are confounded by a latent factor we might call 'wording similarity'? This possibility undermines my case for clean confounding.

Now the second example: imagine I do the same analysis described above, but I find my discriminant validity actually doesn't look so hot, IE there are some high between-factor correlations. It is possible that this is just being caused by some of the variables used in different factors being confounded by their shared **measurement approach,** which creates a backdoor path between the factors.

As @Brown2006 puts it:

> "when each construct is assessed by the same measurement approach (e.g., observer rating), it cannot be determined how much of the observed overlap (i.e., factor correlations) is due to method effects as opposed to "true" covariance of the traits."

So we have these two risks:

1.  Maybe some of my within-factor variables are confounded by method effects, which creates the *illusion* of convergent validity. If I go to publish my paper and someone raises this concern, then maybe I won't get published! I'll need to find a way to make my model control for possible method-confounding and *still* show good convergent validity.
2.  Maybe some of my variables of different factors are confounded by method effects, so I don't end up with great discriminant validity. This would be bad, but fitting a model that controls for method effects can maybe make things better.

Fear not: there are two ways of adjusting the model to control for measurement confounding, thereby addressing the above risks.

1.  Add method-specific factors to my model (to control for them in the linear model of each variable). @Brown2006 calls this a **Correlated Methods Model**;

2.  Just freely fit the residual covariances between the observed variables that share a method. @Brown2006 calls this a **Correlated Uniqueness Model.** Because remember, 'Uniqueness' is just a fancy term for variable-specific residual variance.

It's all still just basic linear modelling, and trying to show that the model's results are consistent with the DAG of clean confounding. By adding a method factors or allowing some of the error residuals to be freely fit, I'm controlling for sources of confounding that a reviewer might bring up as a concern, or that might be pulling down my discriminant validity.

Here's how these approaches can improve convergent or divergent validity:

**Convergent validity:** By adding method-factors to the model or freely fitting the residual covariances between the within-factor questions can help me make the case that "see, even when I allow for correlated errors due to *other* unobserved confounders (like common wording or common methods), the factors still do a good job recreating the empirical covariance structure, IE the loadings still look good, so my argument for *mostly* clean confounding is still reasonable." I think this makes sense?

**Divergent validity:** Maybe I can get better discriminant validity, IE reduce the between-factor correlations, by adding those method effects to the linear models, thereby controlling for them. I can do this either by literally adding in some new factors to represent each method, or just by allowing the residual covariances of like-method variables to be freely estimated.

### Simulating Data Based on a DAG {-}

Now let's look at an example in detail. This example is taken from @Brown2006, chapter 6.

Some researchers were curious about whether 'happiness' and 'sadness' are totally separate things vs two sides of a single shared spectrum. I guess the implication is that if they are totally separate things then I could be [happy and sad at the same time](https://www.youtube.com/watch?v=U5oIvfraRrU), whereas if they're two sides of a spectrum then I can only ever be one or the other.

This feels like a good factor analysis question! I can collect a bunch of data that I think map to 'happy' and a bunch of other data that I think map to 'sad', fit a CFA, and see whether the two factors have discriminant validity.

This is exactly what @Green-et-al-1993 did. They collected a few columns each for 'happy' and 'sad', fit a factor model, and fit a CFA. Each within-factor column had its own measurement approach, but shared a measurement approach with one of the columns of the other factor. So we are at risk of our estimate of between-factor correlations being confounding due to shared measurement approach, which could be hurting my case for discriminant validity!

Here's how we can show this situation in a DAG:

```{r}

# Set DAG coordinates
dag_coords <- list(
  x = c(
    F1 = 1, 
    F2 = 1,
    H1 = 2,
    H2 = 2,
    H3 = 2,
    S1 = 2,
    S2 = 2,
    S3 = 2,
    M1 = 3,
    M2 = 3,
    M3 = 3),
  y = c(
    F1 = 2.5,
    F2 = 1.5,
    H1 = 2.8,
    H2 = 2.5,
    H3 = 2.2,
    S1 = 1.8,
    S2 = 1.5,
    S3 = 1.2,
    M1 = 2.6,
    M2 = 2,
    M3 = 1.4
  )
)

# Set DAG relationships and aesthetics
measurement_confounding_dag <- ggdag::dagify(
  H1 ~ F1,
  H2 ~ F1,
  H3 ~ F1,
  S1 ~ F2,
  S2 ~ F2,
  S3 ~ F2,
  H1 ~ M1,
  S1 ~ M1,
  H2 ~ M2,
  S2 ~ M2,
  H3 ~ M3,
  S3 ~ M3,
  coords = dag_coords
) %>% 
  
  tidy_dagitty() %>% 
  
  mutate(
    
    node_colour = case_when(
      grepl("^F|M", name) ~ "latent",
      grepl("^H|S", name) ~ "observed"
    ),
    
    edge_colour = case_when(
      grepl("^M", name) & grepl("1$", to) ~ "cornflower blue",
      grepl("^M", name) & grepl("2$", to) ~ "#daed64",
      grepl("^M", name) & grepl("3$", to) ~ "#ed7864",
      grepl("^F", name)                   ~ "black"
    )
  )

# Plot the DAG
measurement_confounding_dag %>%
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
  geom_dag_point(aes(colour = node_colour)) +
  scale_colour_manual(values = c("dark blue", "#edbc64")) + 
  geom_dag_edges(aes(edge_colour = edge_colour)) +
  geom_dag_text() +
  theme_void()

```

See how the measurment effects M1, M2, and M3 each create a backdoor path between the two factors F1 and F2. So if I want to get better-seeming (and, under the DAG, more accurate) estimate of between-factor correlation, then I need to find a way to close those backdoor paths. The classic way to close these paths would be to condition on the measurement effects by adding them to the linear model, but I can't directly do this because they are unmeasured. But, as discussed above, I can still sort of do it by adding them as factors to my CFA model, or by freely estimating residual correlation between the observed variables that share a measurement approach, which should work if my DAG is mostly accurate. 

Unfortunately, the authors of this paper haven't published their data. But we can take this as an opportunity to practice simulating a dataset with relationships implied by a DAG.

```{r}

### Simulate Data from the DAG

# Set seed for replicable results
set.seed(233)

# Set sample size
N <- 305

# Create the dataset
dat_fake <- tibble(
  
  # The factors are uncorrelated in reality, but
  # will be confounded by the measurement effects!
  F1 = rnorm(N, 0, 1),
  F2 = rnorm(N, 0, 1),
  
  # The measurement effects
  M1 = rnorm(N, 0, 1),
  M2 = rnorm(N, 0, 1),
  M3 = rnorm(N, 0, 1),
  
  # The DAG says the measurements are fully determined by the latent factors and measurement effects
  H1 = .8*F1 + 0.7*M1 + rnorm(N, 0, .3),
  H2 = .7*F1 + 0.7*M2 + rnorm(N, 0, .3),
  H3 = .9*F1 + 0.7*M3 + rnorm(N, 0, .3),
  S1 = .8*F2 + 0.7*M1 + rnorm(N, 0, .3),
  S2 = .7*F2 + 0.7*M2 + rnorm(N, 0, .3),
  S3 = .9*F2 + 0.7*M3 + rnorm(N, 0, .3) 
) 

```

Fun! Now we have our fake data to play with. For starters, since we actually _do_ have the values of the latent variables in our dataset, we can demonstrate how directly controlling for the measurement effects in a regression model can close the backdoor path between the factors.  

```{r}

list(
  lm(H1 ~ S1, dat_fake), 
  lm(H1 ~ S1 + M1, dat_fake)
) %>% 
  
  map(broom::tidy) %>% 
  
  knitr::kable()

```

When we just do the simple regression of H1 on S1 we get a big effect with a highly statistically significant p-value, despite the fact that we _know_ there's no causal relationship there! But then when we include the confounding measurement effect in the model this effect vanishes in smoke. 

That's all well and good. But in reality we won't have measurements of the latent variables, so we won't be able to directly control for them. Thankfully, we have Factor Analysis. We can control for the measurement effects by estimating the residual correlation between each pair of variables that share a measurement effect. Since, under the DAG, the measurement effects are the only source of correlation between these variables, this should close the backdoor path, IE we should get unbiased estimates of the factor loadings.

BUT WHEN I REGRESS F1 ~ F2 I GET NO EFFECT, EVEN THOUGH THE DUMB VERSION OF THE CFA FINDS THEM TO BE CORRELATED. THIS PROBABLY REVEALS SOMETHING DEEP ABOUT FACTOR ANALYSIS THAT I DONT UNDERSTAND?





....@Brown2006 calls this an "error theory".....


....

### Correlated Uniqueness Model {-}

To illustrate, we'll fit 2 models: The first is a basic CFA model that just loads each measured variable on its corresponding factor. The second specifies that the residual correlation between the measurement-confounded variables should be freely estimated, IE not fixed at 0. 

```{r}

basic.definition <- 
  'happy =~ H1 + H2 + H3
   sad =~ S1 + S2 + S3
   '

correlated_uniqueness.definition <- 
  'happy =~ H1 + H2 + H3
   sad =~ S1 + S2 + S3
   
   H1 ~~ S1
   H2 ~~ S2
   H3 ~~ S3
   '
basic.fit <- cfa(
  data = dat_fake %>% select(matches("^(H|S)")),
  model = basic.definition
)

correlated_uniqueness.fit <- cfa(
  data = dat_fake %>% select(matches("^(H|S)")),
  model = correlated_uniqueness.definition
)

summary.basic.fit <- summary(basic.fit, standardized = TRUE)
summary.correlated_uniqueness.fit <- summary(correlated_uniqueness.fit, standardized = TRUE)

summary.basic.fit
summary.correlated_uniqueness.fit

fit_measures(basic.fit) %>% 
  
  knitr::kable(caption = "Basic Model")

fit_measures(correlated_uniqueness.fit) %>% 
  
  knitr::kable(caption = "Correlated Uniqueness Model")


```

CLEAN UP THESE OUTPUTS! Here we see that under the basic model we have some moderate correlation between the `happy` and `sad` factors, which is a bit of a murky result: it doesn't tell us one way or the other whether happiness and sadness are separate constructs I can feel together or two extremes of the same feeling. But under the correlated uniqueness model this correlation evaporates because we've controlled for the measurement effects, closing the backdoor path between `happy` and `sad`. This model also greatly improves goodness-of-fit, which makes sense because it better reflects the true data-generating process we coded up. 

Now let's consider the other case in which measurement effects might be hurting us: the case in which _within_-factor measurements are confounded by measurement effects. Here's the DAG. 



We also could have controlled for the measurement effects by including measurement factors, IE by adopting a 'Correlated Methods Model'. I tried this but I actually I couldn't get this model to converge, regardless of whether its method factors were correlated or uncorrelated (an 'Uncorrelated Methods Model'. @Brown2006 actually mentions this as a common issue, and favours the Correlated Uniqueness Model for that reason. In his words:

> "an overriding drawback of the correlated methods model is that it is usually empirically underidentified. Consequently, a correlated methods solution will typically fail to converge. If it does converge, the solution will usually be associated with Heywood cases [negative variance estimates] and large standard errors"


## Cool ecology example I should do instead: {-}


Do an example from here, or possibly from the linked 3rd lecture that covers more advanced CFA topics https://stats.oarc.ucla.edu/r/seminars/rcfa/ but read the corresponding Brown chapter first.

Now we'll look at an example from @Kline2011, chapter 13.

Load the data:

```{r}

dat_kline <- read_csv('data/kline/kabc-amos.csv')


```

## Example 4:

Lastly, let's walk through [an example from the lavaan documentation](https://www.lavaan.ugent.be/tutorial/cfa.html)

## Session Info

```{r}

sessionInfo()


```
