S1 = 0.7*M2 + rnorm(N, 0, .3),
S2 = 0.7*F2 + 0.8*M2 + rnorm(N, 0, .3),
S3 = 0.7*M2 + rnorm(N, 0, .3)
)
cor(dat_fake)
dumb.definition <-
'happy =~ H1 + H2 + H3
sad =~ S1 + S2 + S3
'
correlated_uniqueness.definition <-
'happy =~ H1 + H2 + H3
sad   =~ S1 + S2 + S3
H1 ~~ H2
H1 ~~ H3
H2 ~~ H3
S1 ~~ S2
S1 ~~ S3
S2 ~~ S3
'
dumb.fit <- cfa(
data = dat_fake,
model = dumb.definition
)
summary(dumb.fit, standardized = TRUE)
correlated_uniqueness.fit <- cfa(
data = dat_fake,
model = correlated_uniqueness.definition
)
dumb.fit <- cfa(
data = dat_fake,
model = dumb.definition
)
summary(dumb.fit, standardized = TRUE)
correlated_uniqueness.fit <- cfa(
data = dat_fake,
model = correlated_uniqueness.definition
)
correlated_methods.definition <-
'happy =~ H1 + H2 + H3
sad   =~ S1 + S2 + S3
M1    =~ H1 + S1
'
correlated_methods.fit <- cfa(
data = dat_fake,
model = correlated_methods.definition
)
correlated_methods.definition <-
'happy =~ H1 + H2 + H3
sad   =~ S1 + S2 + S3
Method1    =~ H1 + S1
'
dumb.fit <- cfa(
data = dat_fake,
model = dumb.definition
)
correlated_uniqueness.fit <- cfa(
data = dat_fake,
model = correlated_uniqueness.definition
)
correlated_methods.fit <- cfa(
data = dat_fake,
model = correlated_methods.definition
)
correlated_methods.fit <- cfa(
data = dat_fake,
model = correlated_methods.definition
)
correlated_uniqueness.fit <- cfa(
data = dat_fake,
model = correlated_uniqueness.definition
)
dag_coords <- list(
x = c(
F1 = 1,
F2 = 1,
H1 = 2,
H2 = 2,
H3 = 2,
S1 = 2,
S2 = 2,
S3 = 2,
M1 = 3,
M2 = 3),
y = c(
F1 = 2.5,
F2 = 1.5,
H1 = 2.8,
H2 = 2.5,
H3 = 2.2,
S1 = 1.8,
S2 = 1.5,
S3 = 1.2,
M1 = 2.5,
M2 = 1.5
)
)
# Set DAG relationships and aesthetics
measurement_confounding_dag <- ggdag::dagify(
H3 ~ F1,
S2 ~ F2,
H1 ~ M1,
H2 ~ M1,
H3 ~ M1,
S1 ~ M2,
S2 ~ M2,
S3 ~ M2,
coords = dag_coords
) %>%
tidy_dagitty() %>%
mutate(
node_colour = case_when(
grepl("^F|M", name) ~ "latent",
grepl("^H|S", name) ~ "observed"
),
edge_colour = case_when(
grepl("M1", name)  ~ "cornflower blue",
grepl("M2", name) ~ "#ed7864",
grepl("^XX", name) & grepl("3$", to) ~ "#ed7864",
grepl("^F", name)                   ~ "black"
)
)
# Plot the DAG
measurement_confounding_dag %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(aes(colour = node_colour)) +
scale_colour_manual(values = c("dark blue", "#edbc64")) +
geom_dag_edges(aes(edge_colour = edge_colour)) +
geom_dag_text() +
theme_void()
basic.definition <-
'happy =~ H1 + H2 + H3
sad =~ S1 + S2 + S3
'
basic.fit <- cfa(
data = dat_fake,
model = basic.definition
)
library(tidyverse)
library(lavaan)
library(ggdag)
dat <- read_csv('data/ucla/hsbdemo.csv')
dat %>%
view()
dat %>% view()
dat %>%
ggplot(aes(x = read, y = math)) +
geom_point()
dat %>%
ggplot(aes(x = read, y = math)) +
geom_point() +
geom_line()
dat %>%
ggplot(aes(x = read, y = math)) +
geom_point() +
geom_line(formula = "lm")
dat %>%
ggplot(aes(x = read, y = math)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>% colnames()
dat %>%
ggplot(aes(x = read, y = math, colour = ses )) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = read, y = math, colour = female)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = read, y = science, colour = )) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = read, y = science)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = read, y = science, colour = schtyp)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = write, y = science, colour = schtyp)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = write, y = science)) +
geom_point() +
geom_smooth(formula = "lm")
dat %>%
ggplot(aes(x = write, y = math)) +
geom_point() +
geom_smooth(formula = "lm")
dat
dat %>%
group_split(female)
dat <- dat %>%
group_split(female)
dat
dat[[1]]
?group_split
dat <- read_csv('data/ucla/hsbdemo.csv')
dat_boys <- dat %>%
filter(female == 0)
dat <- list(
boys = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 0)
dat_girls <- read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 1)
)
dat <- list(
boys = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 0),
dat_girls <- read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 1)
)
dat <- list(
boys  = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 0),
girls = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == 1)
)
dat$boys
onefac <- 'f1  =~ read + write + math + science'
onefac <- 'f1  =~ read + write + math + science'
list(
onefac_boys  = cfa(onefac, data = dat$boys, meanstructure = TRUE),
onefac_girls = cfa(onefac, data = dat$girls, meanstructure = TRUE)
)
dat_boys
dat$boys
dat$girls
read_csv('data/ucla/hsbdemo.csv')
dat <- list(
boys  = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == "female"),
girls = read_csv('data/ucla/hsbdemo.csv') %>% filter(female == "male")
)
onefac <- 'f1  =~ read + write + math + science'
list(
onefac_boys  = cfa(onefac, data = dat$boys, meanstructure = TRUE),
onefac_girls = cfa(onefac, data = dat$girls, meanstructure = TRUE)
)
onefac_models %>%
map(summary)
onefac_models <- list(
onefac_boys  = cfa(onefac, data = dat$boys, meanstructure = TRUE),
onefac_girls = cfa(onefac, data = dat$girls, meanstructure = TRUE)
)
onefac_models %>%
map(summary)
onefac_models %>%
map(summary, standardized = TRUE)
onefac_models %>% map(summary, standardized = TRUE)
cfa(onefac, data = femaledat, meanstructure = TRUE, fit.measures = TRUE)
onefac_models %>% map(summary, standardized = TRUE, fit.measures = TRUE)
onefac_models %>% map(summary, standardized = TRUE, fit.measures = TRUE)
onefac_models %>% map(fit_measures)
fit_measures <- function(fit){
summary <- summary(fit, fit.measures = TRUE, standardized = TRUE)
res <- list(
# Chi-Squared
chi_squared = tibble(
Test             = "standard chi-squared",
`DF`             = summary$test$standard$df,
`Test Statistic` = round(summary$test$standard$stat, 2),
`p-value`        = summary$test$standard$pvalue) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(everything()),
# RMSEA
rmsea = summary$fit %>%
as_tibble(rownames = "stat") %>%
filter(str_detect(stat, "rmsea")),
# CFI and TLI
cfi_tli = summary$fit %>%
as_tibble(rownames = "stat") %>%
filter(str_detect(stat, "cfi|tli"))
)
res
}
onefac_models %>% map(fit_measures)
onefac_models %>% map(summary, standardized = TRUE, fit.measures = TRUE)
configural.fit <- cfa(onefac, data = hsbdemo, group = "female", meanstructure = TRUE)
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
dat <- read_csv('data/ucla/hsbdemo.csv')
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
cfa(onefac, data = femaledat, meanstructure = TRUE, fit.measures = TRUE)
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
summary(fit.configural, standardized=TRUE)
summary(configural.fit, standardized=TRUE)
summary(configural.fit, standardized=TRUE)
dat <- read_csv('data/ucla/hsbdemo.csv')
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
equal.loadings.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
anova(configural.fit, equal.loadings.fit)
anova(configural.fit, equal.loadings.fit)
equal.intercepts.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts"), meanstructure = TRUE)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
equal.residuals.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts", "residuals"), meanstructure = TRUE)
anova(equal.loadings.fit, equal.intercepts.fit)
modindices(equal.intercepts.fit) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
summary(equal.loadings.fit, standardized = TRUE, fit.measures = TRUE)
summary(equal.loadings.fit, standardized = TRUE, fit.measures = TRUE)
summary(equal.intercepts.fit, standardized = TRUE, fit.measures = TRUE)
modindices(equal.intercepts.fit)
?modindices
modindices(equal.intercepts.fit, free.remove = FALSE)
modindices(equal.intercepts.fit) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
onefac <- 'f1  =~ read + write + math + science
read ~~    math'
equal.intercepts.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts"), meanstructure = TRUE)
modindices(equal.intercepts.fit) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
onefac <- 'f1  =~ read + write + math + science
read ~~    math'
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
equal.loadings.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
equal.intercepts.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts"), meanstructure = TRUE)
equal.residuals.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts", "residuals"), meanstructure = TRUE)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
summary(equal.intercepts.fit, standardized = TRUE, fit.measures = TRUE)
summary(equal.intercepts.fit, standardized = TRUE, fit.measures = TRUE)
lavTestScore(equal.intercepts.fit)
modindices(equal.intercepts.fit, sort = TRUE) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
modindices(equal.intercepts.fit, sort = TRUE)
summary(equal.intercepts.fit, standardized = TRUE, fit.measures = TRUE)
onefac <- 'f1  =~ read + write + math + science'
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
equal.loadings.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
equal.intercepts.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts"), meanstructure = TRUE)
equal.residuals.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts", "residuals"), meanstructure = TRUE)
modindices(equal.intercepts.fit, sort = TRUE) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
lavTestScore(equal.intercepts.fit)
lavTestScore(equal.intercepts.fit)
modindices(equal.intercepts.fit, sort = TRUE) %>%
# Arrange them in order of modification index
arrange(desc(mi)) %>%
select(lhs, op, rhs, mi)
lavTestScore(equal.intercepts.fit)
lavTestScore(equal.intercepts.fit)
lavTestScore(equal.intercepts.fit) %>%
arrange(X2)
what <- lavTestScore(equal.intercepts.fit)
what
what$test
what$uni
library(tidyverse)
library(lavaan)
library(ggdag)
### Partial invariance
onefac_partial_invariance <- 'f1  =~ read + write + c(a,b)*math + science
read ~ 1
write ~ 1
math ~ 1
science ~ 1'
### Load the data
dat <- read_csv('data/ucla/hsbdemo.csv')
### Load the data again but in split format, for what is to come.
dat_split <- list(
boys  = dat %>% filter(female == "female"),
girls = dat %>% filter(female == "male")
)
### Define the basic CFA model
onefac <- 'f1  =~ read + write + math + science'
### Fit the model separately for each group
onefac_models <- list(
onefac_boys  = cfa(onefac, data = dat_split$boys, meanstructure = TRUE),
onefac_girls = cfa(onefac, data = dat_split$girls, meanstructure = TRUE)
)
### Gaze at the parameter estimates
onefac_models %>% map(summary, standardized = TRUE, fit.measures = TRUE)
### Configural fit
configural.fit <- cfa(onefac, data = dat, group = "female", meanstructure = TRUE)
### Equal loadings
equal.loadings.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
summary(equal.loadings.fit, standardized = TRUE, fit.measures = TRUE)
### Equal intercepts
equal.intercepts.fit <- cfa(onefac, data = dat, group = "female",
group.equal = c("loadings","intercepts"), meanstructure = TRUE)
### Partial invariance
onefac_partial_invariance <- 'f1  =~ read + write + c(a,b)*math + science
read ~ 1
write ~ 1
math ~ 1
science ~ 1'
fit.partial.invariance <- cfa(onefac_d, data = hsbdemo, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
fit.partial.invariance <- cfa(onefac_partial_invariance, dat, group = "female",
group.equal = c("loadings"), meanstructure = TRUE)
lavTestScore(equal.intercepts.fit)
fit.partial.invariance <- cfa(onefac_partial_invariance, dat, group = "female",
group.equal = c("loadings", "intercepts"), meanstructure = TRUE)
summary(fit.partial, standardized=TRUE)
summary(fit.partial.invariance, standardized=TRUE)
anova(configural.fit, equal.loadings.fit)
anova(configural.fit, equal.loadings.fit)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
partial.invariance.fit <- cfa(onefac_partial_invariance, dat, group = "female",
group.equal = c("loadings", "intercepts"), meanstructure = TRUE)
anova(configural.fit, equal.loadings.fit, partial.invariance.fit)
anova(configural.fit, equal.loadings.fit, equal.intercepts.fit)
anova(configural.fit, equal.loadings.fit, partial.invariance.fit)
### Partial invariance
onefac_partial_invariance <- 'f1  =~ read + write + math + science
read ~ c(a,b)*1
write ~ 1
math ~ 1
science ~ 1'
partial.invariance.fit <- cfa(onefac_partial_invariance, dat, group = "female",
group.equal = c("loadings", "intercepts"), meanstructure = TRUE)
summary(fit.partial.invariance, standardized=TRUE)
summary(fit.partial.invariance, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
### Partial invariance
onefac_partial_invariance <- 'f1  =~ read + write + math + science'
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(fit.partial.invariance, standardized=TRUE)
### Partial invariance
onefac_partial_invariance <- 'f1  =~ read + write + math + science'
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("math~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
#  group.partial=c("math~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
#group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
summary(partial.invariance.fit, standardized=TRUE)
anova(configural.fit, equal.loadings.fit, partial.invariance.fit)
### Partial invariance
onefac <- 'f1  =~ read + write + math + science'
partial.invariance.fit <- cfa(
onefac_partial_invariance,
dat,
group = "female",
group.equal = c("loadings", "intercepts"),
group.partial=c("read~1"), # This frees up the desired intercepts
meanstructure = TRUE)
dat <- read_csv('data/ucla/hsbdemo.csv')
library(tidyverse)
dat <- read_csv('data/ucla/hsbdemo.csv')
dat |> view()
